{"version":3,"sources":["ng://@ngeth/wallet/lib/wallet.module.ts","ng://@ngeth/wallet/lib/signature/rlp.ts","null","ng://@ngeth/wallet/lib/signature/signer.ts","ng://@ngeth/wallet/lib/account/encryption.ts","ng://@ngeth/wallet/lib/account/account.ts","ng://@ngeth/wallet/lib/wallet.ts"],"names":["WalletModule","NgModule","RLP","prototype","encode","input","Array","output","i","length","push","this","buf","Buffer","concat","encodeLength","toBuffer","safeParseInt","v","base","slice","Error","parseInt","len","offset","from","hexLength","intToHex","lLength","firstByte","decode","stream","decoded","_decode","assert.equal","remainder","data","getLength","llength","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","hex","padToEven","a","intToBuffer","isBuffer","undefined","toArray","Injectable","args","providedIn","__assign","Object","assign","t","s","n","arguments","p","hasOwnProperty","call","__read","o","m","Symbol","iterator","r","e","ar","next","done","value","error","__spread","Signer","rlp","signTx","privateKey","tx","chainId","rawTx","rawChain","rlpEncoded","messageHash","keccak256","_a","sign","rawTransaction","recoverTx","nonce","gasPrice","gas","to","toLowerCase","replace","hash","privKey","addToV","secp256k1","signature","recovery","hashMessage","message","msg","isHexStrict","hexToBytes","msgBuffer","preamble","preambleBuffer","ethMsg","EncryptOptions","options","key","randomBytes","salt","Accounts","create","privateKeyVerify","fromPrivate","pubKey","publicKeyCreate","address","substring","toChecksumAddress","encrypt","password","encryptOptions","derivedKey","pwd","iv","kdf","c","dklen","cipher","uuid","kdfParams","prf","pbkdf2Sync","scryptsy","cipherAlg","createCipheriv","cipherText","update","final","toMac","mac","version","id","v4","random","crypto","ciphertext","cipherparams","kdfparams","decrypt","keystore","decipher","createDecipheriv","seed","Wallet","provider","signer","accounts","BehaviorSubject","localKeystore","asObservable","currentAccount","getKeystoreMapFromLocalStorage","defineProperty","getValue","account","localStorage","fill","reduce","keyMap","none","checkAddressChecksum","_this","getKeystore","checkSum","JSON","parse","getItem","getAccounts","keystores$","pipe","map","keys","save","setItem","stringify","sendTransaction","sendRawTransaction","rpc","keystores","ethAccount","signMessage","ProvidersModule","MainProvider"],"mappings":"ovBAAA,IAAAA,EAAA,oDACCC,EAAAA,aADD,qCCcSC,EAAAC,UAAAC,gBAAOC,GACZ,GAAIA,aAAiBC,MAAO,CAE1B,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAChCD,EAAOG,KAAKC,KAAKP,OAAOC,EAAMG,KAEhC,IAAMI,EAAMC,EAAAA,OAAOC,OAAOP,GAC1B,OAAOM,EAAAA,OAAOC,OAAO,CAACH,KAAKI,aAAaH,EAAIH,OAAQ,KAAMG,IAG1D,OAAqB,KADrBP,EAAQM,KAAKK,SAASX,IACZI,QAAgBJ,EAAM,GAAK,IAC5BA,EAEAQ,EAAAA,OAAOC,OAAO,CAACH,KAAKI,aAAaV,EAAMI,OAAQ,KAAMJ,KAK1DH,EAAAC,UAAAc,sBAAcC,EAAGC,GACvB,GAAsB,OAAlBD,EAAEE,MAAM,EAAG,GACb,MAAA,IAAWC,MAAM,4BAEnB,OAAOC,SAASJ,EAAGC,IAGbjB,EAAAC,UAAAY,sBAAcQ,EAAKC,GACzB,GAAID,EAAM,GACR,OAAOV,EAAAA,OAAOY,KAAK,CAACF,EAAMC,IAE1B,IAAME,EAAYf,KAAKgB,SAASJ,GAC1BK,EAAUF,EAAUjB,OAAS,EAC7BoB,EAAYlB,KAAKgB,SAASH,EAAS,GAAKI,GAC9C,OAAOf,EAAAA,OAAOY,KAAKI,EAAYH,EAAW,QASvCxB,EAAAC,UAAA2B,gBAAOzB,EAAwB0B,GACpC,IAAK1B,GAA0B,IAAjBA,EAAMI,OAClB,OAAOI,EAAAA,OAAOY,KAAK,IAGrBpB,EAAQM,KAAKK,SAASX,GACtB,IAAM2B,EAAUrB,KAAKsB,QAAQ5B,GAE7B,OAAI0B,EACF,GAGFG,EAAAA,MAAaF,EAAQG,UAAU1B,OAAQ,EAAG,qBACnCuB,EAAQI,OAGVlC,EAAAC,UAAAkC,mBAAUhC,GACf,IAAKA,GAA0B,IAAjBA,EAAMI,OAClB,OAAOI,EAAAA,OAAOY,KAAK,IAIrB,IAAMI,GADNxB,EAAQM,KAAKK,SAASX,IACE,GACxB,GAAIwB,GAAa,IACf,OAAOxB,EAAMI,OACR,GAAIoB,GAAa,IACtB,OAAOA,EAAY,IACd,GAAIA,GAAa,IACtB,OAAOA,EAAY,IACd,GAAIA,GAAa,IAEtB,OAAOA,EAAY,IAGnB,IAAMS,EAAUT,EAAY,IAE5B,OAAOS,EADQ3B,KAAKM,aAAaZ,EAAMe,MAAM,EAAGkB,GAASC,SAAS,OAAQ,KAKtErC,EAAAC,UAAA8B,iBAAS5B,GACf,IAAII,EAAQ6B,EAASF,EAAMI,EAAgBC,EACrCT,EAAU,GACVH,EAAYxB,EAAM,GAExB,GAAIwB,GAAa,IAEf,MAAO,CACLO,KAAM/B,EAAMe,MAAM,EAAG,GACrBe,UAAW9B,EAAMe,MAAM,IAEpB,GAAIS,GAAa,IAAM,CAY5B,GATApB,EAASoB,EAAY,IAInBO,EADgB,MAAdP,EACKhB,EAAAA,OAAOY,KAAK,IAEZpB,EAAMe,MAAM,EAAGX,GAGT,IAAXA,GAAgB2B,EAAK,GAAK,IAC5B,MAAM,IAAIf,MAAM,gDAGlB,MAAO,CACLe,KAAMA,EACND,UAAW9B,EAAMe,MAAMX,IAEpB,GAAIoB,GAAa,IAAM,CAI5B,GAHAS,EAAUT,EAAY,IACtBpB,EAASE,KAAKM,aAAaZ,EAAMe,MAAM,EAAGkB,GAASC,SAAS,OAAQ,KACpEH,EAAO/B,EAAMe,MAAMkB,EAAS7B,EAAS6B,IAC5B7B,OAASA,EAChB,MAAA,IAAWY,MAAM,eAGnB,MAAO,CACLe,KAAMA,EACND,UAAW9B,EAAMe,MAAMX,EAAS6B,IAE7B,GAAIT,GAAa,IAAM,CAI5B,IAFApB,EAASoB,EAAY,IACrBW,EAAiBnC,EAAMe,MAAM,EAAGX,GACzB+B,EAAe/B,QACpBgC,EAAI9B,KAAKsB,QAAQO,GACjBR,EAAQtB,KAAK+B,EAAEL,MACfI,EAAiBC,EAAEN,UAGrB,MAAO,CACLC,KAAMJ,EACNG,UAAW9B,EAAMe,MAAMX,IAMzB,IAAMiC,GAFNJ,EAAUT,EAAY,MACtBpB,EAASE,KAAKM,aAAaZ,EAAMe,MAAM,EAAGkB,GAASC,SAAS,OAAQ,KAEpE,GAAIG,EAAcrC,EAAMI,OACtB,MAAM,IAAIY,MAAM,qDAIlB,GAA8B,KAD9BmB,EAAiBnC,EAAMe,MAAMkB,EAASI,IACnBjC,OACjB,MAAM,IAAIY,MAAM,0CAGlB,KAAOmB,EAAe/B,QACpBgC,EAAI9B,KAAKsB,QAAQO,GACjBR,EAAQtB,KAAK+B,EAAEL,MACfI,EAAiBC,EAAEN,UAErB,MAAO,CACLC,KAAMJ,EACNG,UAAW9B,EAAMe,MAAMsB,KAUrBxC,EAAAC,UAAAwC,uBAAcC,GACpB,MAA2B,OAApBA,EAAIxB,MAAM,EAAG,IAIdlB,EAAAC,UAAA0C,wBAAeD,GACrB,MAAmB,iBAARA,EACFA,EAEFjC,KAAKgC,cAAcC,GAAOA,EAAIxB,MAAM,GAAKwB,GAG1C1C,EAAAC,UAAAwB,kBAASnB,GACf,IAAIsC,EAAMtC,EAAE+B,SAAS,IAIrB,OAHIO,EAAIrC,OAAS,IACfqC,EAAM,IAAMA,GAEPA,GAGD5C,EAAAC,UAAA4C,mBAAUC,GAEhB,OADIA,EAAEvC,OAAS,IAAGuC,EAAI,IAAMA,GACrBA,GAGD9C,EAAAC,UAAA8C,qBAAYzC,GAClB,IAAMsC,EAAMnC,KAAKgB,SAASnB,GAC1B,OAAOK,EAAAA,OAAOY,KAAKqB,EAAK,QAGlB5C,EAAAC,UAAAa,kBAASE,GACf,IAAKL,EAAAA,OAAOqC,SAAShC,GACnB,GAAiB,iBAANA,EAEPA,EADEP,KAAKgC,cAAczB,GACjBL,EAAAA,OAAOY,KAAKd,KAAKoC,UAAUpC,KAAKkC,eAAe3B,IAAK,OAEpDL,EAAAA,OAAOY,KAAKP,QAEb,GAAiB,iBAANA,EAIdA,EAHGA,EAGCP,KAAKsC,YAAY/B,GAFjBL,EAAAA,OAAOY,KAAK,SAIb,GAAU,OAANP,GAAcA,IAAMiC,UAC7BjC,EAAIL,EAAAA,OAAOY,KAAK,QACX,CAAA,IAAIP,EAAEkC,QAIX,MAAM,IAAI/B,MAAM,gBAFhBH,EAAIL,EAAAA,OAAOY,KAAKP,EAAEkC,WAKtB,OAAOlC,uBAhOVmC,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAYvD,yGCcfwD,EAAWC,OAAOC,QAAU,SAAkBC,GACrD,IAAK,IAAIC,EAAGpD,EAAI,EAAGqD,EAAIC,UAAUrD,OAAQD,EAAIqD,EAAGrD,IAE5C,IAAK,IAAIuD,KADTH,EAAIE,UAAUtD,GACOiD,OAAOtD,UAAU6D,eAAeC,KAAKL,EAAGG,KAAIJ,EAAEI,GAAKH,EAAEG,IAE9E,OAAOJ,GAGX,SAAAO,EA6EuBC,EAAGN,GACtB,IAAIO,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBI,EAAYC,EAA3BhE,EAAI4D,EAAEH,KAAKE,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANZ,GAAsB,EAANA,QAAcU,EAAI/D,EAAEkE,QAAQC,MAAMF,EAAG/D,KAAK6D,EAAEK,OAExE,MAAOC,GAASL,EAAI,CAAEK,MAAOA,WAEzB,IACQN,IAAMA,EAAEI,OAASP,EAAI5D,EAAU,YAAI4D,EAAEH,KAAKzD,WAExC,GAAIgE,EAAG,MAAMA,EAAEK,OAE7B,OAAOJ,EAGX,SAAAK,IACI,IAAK,IAAIL,EAAK,GAAIjE,EAAI,EAAGA,EAAIsD,UAAUrD,OAAQD,IAC3CiE,EAAKA,EAAG3D,OAAOoD,EAAOJ,UAAUtD,KACpC,OAAOiE,mBCxHT,SAAAM,EAAoBC,GAAArE,KAAAqE,IAAAA,SAQbD,EAAA5E,UAAA8E,gBAAOC,EAAoBC,EAAcC,GAE9C,IAAMC,EAAQ1E,KAAK0E,MAAMF,GACnBG,EAAW,CAAE,MAAQF,GAAW,GAAG7C,SAAS,IAAK,KAAM,MAGvDgD,EAAa5E,KAAKqE,IAAI5E,OAAM0E,EAAKO,EAAUC,IAG3CE,EAAcC,EAAAA,UAAUF,GAG9BG,EAAA/E,KAAAgF,KAAAT,EAAAM,EAAAJ,GAAQb,EAAAmB,EAAAnB,EAAGX,EAAA8B,EAAA9B,EAAG1C,EAAAwE,EAAAxE,EAMd,MAAO,CAAEsE,YAAWA,EAAEjB,EAACA,EAAEX,EAACA,EAAE1C,EAACA,EAAE0E,eAFR,KADTjF,KAAKqE,IAAI5E,OAAM0E,EAAKO,EAAU,CAACnE,EAAGqD,EAAGX,KACdrB,SAAS,SASzCwC,EAAA5E,UAAA0F,mBAAUR,KAQTN,EAAA5E,UAAAkF,eAAMF,GACZ,MAAO,CACL,MAAQA,EAAGW,OAAS,IACpB,MAAQX,EAAGY,UAAY,IACvB,MAAQZ,EAAGa,KAAO,IAClB,KAAOb,EAAGc,GAAGC,cAAcC,QAAQ,KAAM,KAAO,GAChD,MAAQhB,EAAGP,OAAS,IACpB,MAAQO,EAAG/C,MAAQ,MAUhB2C,EAAA5E,UAAAwF,cAAKT,EAAoBkB,EAAchB,GAC5C,IAAMiB,EAAUxF,EAAAA,OAAOY,KAAKyD,EAAWiB,QAAQ,KAAM,IAAK,OACpD/D,EAAOvB,EAAAA,OAAOY,KAAK2E,EAAKD,QAAQ,KAAM,IAAK,OAC3CG,EAAUlB,GAAqB,EAAVA,EAAyB,EAAVA,EAAc,EAAI,EAC5DM,EAAAa,EAAAZ,KAAAvD,EAAAiE,GAAQG,EAAAd,EAAAc,UAAWC,EAAAf,EAAAe,SACblC,EAAIiC,EAAUjE,SAAS,MAAO,EAAG,IACjCqB,EAAI4C,EAAUjE,SAAS,MAAO,GAAI,IAClCrB,GAAKuF,EAAW,GAAKH,GAAQ/D,SAAS,IAC5C,MAAO,CACLgC,EAAG,KAAKA,EACRX,EAAG,KAAKA,EACR1C,EAAG,KAAKA,EACRsF,UAAW,KAAKjC,EAAIX,EAAI1C,IAQrB6D,EAAA5E,UAAAuG,qBAAYC,GACjB,IAAMC,EAAMC,EAAAA,YAAYF,GAAWA,EAAUG,EAAAA,WAAWH,GAClDI,EAAYlG,EAAAA,OAAOY,KAAI,GACvBuF,EAAW,8BAAmCJ,EAAInG,OAClDwG,EAAiBpG,EAAAA,OAAOY,KAAKuF,GAC7BE,EAASrG,EAAAA,OAAOC,OAAO,CAACmG,EAAgBF,IAC9C,OAAOtB,EAAAA,UAAUyB,wBAvFpB7D,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAYvD,+CALjBE,qHCDTiH,EAYE,SAAYC,GACV,IAAK,IAAMC,eAZkBC,EAAAA,YAAY,YACvBA,EAAAA,YAAY,aACE,gBACvB,kBAEI,UACwB,YAC5B,SACA,cAC6B,wBAClBA,EAAAA,YAAY,IAEdF,EACZzG,KAAKqD,eAAeqD,KACtB1G,KAAK0G,GAAOD,EAAQC,IAIpBD,GAAmC,iBAAjBA,EAAQG,OAC5B5G,KAAK4G,KAAO1G,OAAOY,KAAK2F,EAAQG,KAAKpB,QAAQ,KAAM,IAAK,sBCE5D,SAAAqB,YAKOA,EAAArH,UAAAsH,kBAEL,IADA,IAAIpB,EACCA,EAAUiB,EAAAA,YAAY,KACnBI,EAAAA,iBAAiBrB,KACzB,OAAO1F,KAAKgH,YAAYtB,IAOnBmB,EAAArH,UAAAwH,qBAAYzC,GACS,iBAAfA,IACTA,EAAarE,OAAOY,KAAK,CAACyD,EAAWiB,QAAQ,KAAM,OAGrD,IAAMyB,EAASC,EAAAA,gBAAgB3C,GAAY,GAAO9D,MAAM,GAClD0G,EAAU,KAAOrC,EAAAA,UAAUmC,GAAQG,UAAU,IACnD,MAAO,CACL7C,WAAY,KAAOA,EAAW3C,SAAS,OACvCuF,QAASE,EAAAA,kBAAkBF,KAWxBN,EAAArH,UAAA8H,iBACL/C,EACAgD,EACAC,GAEA,IASIC,EATEC,EAAMxH,OAAOY,KAAKyG,GAClB7B,EAAUxF,OAAOY,KAAKyD,EAAWiB,QAAQ,KAAM,IAAK,OACpDiB,EAAU,IAAID,EAAegB,GAC3BZ,EAAAH,EAAAG,KAAMe,EAAAlB,EAAAkB,GAAIC,EAAAnB,EAAAmB,IAAKC,EAAApB,EAAAoB,EAAG3E,EAAAuD,EAAAvD,EAAGU,EAAA6C,EAAA7C,EAAGR,EAAAqD,EAAArD,EAAG0E,EAAArB,EAAAqB,MAAOC,EAAAtB,EAAAsB,OAAQC,EAAAA,EAAAA,KAC5CC,EAA6C,CACjDH,MAAOA,EACPlB,KAAM,EAAiBhF,SAAS,QAIlC,GAAY,WAARgG,EACFK,EAAUJ,EAAIA,EACdI,EAAUC,IAAM,cAChBT,EAAaU,EAAAA,WAAWT,EAAKd,EAAMiB,EAAGC,EAAO,cACxC,CAAA,GAAY,WAARF,EAMT,MAAM,IAAIlH,MAAM,sCAAwCkH,GALxDK,EAAU/E,EAAIA,EACd+E,EAAUrE,EAAIA,EACdqE,EAAU7E,EAAIA,EACdqE,EAAaW,EAASV,EAAKd,EAAM1D,EAAGU,EAAGR,EAAG0E,GAK5C,IAAMO,EAAYC,EAAAA,eAAeP,EAAQN,EAAWhH,MAAM,EAAG,IAAKkH,GAClE,IAAKU,EAAa,MAAM,IAAI3H,MAAM,sBAAwBqH,GAC1D,IAAMQ,EAAarI,OAAOC,OAAO,CAACkI,EAAUG,OAAO9C,GAAU2C,EAAUI,aACjEC,EAAQxI,OAAOC,OAAO,CAACsH,EAAWhH,MAAM,GAAI,IAAK8H,IACjDI,EAAM7D,EAAAA,UAAU4D,GAAOlD,QAAQ,KAAM,IAC3C,MAAO,CACLoD,QAAS,EACTC,GAAIC,EAAAA,GAAG,CAAEC,OAAM,IACf5B,QAASnH,KAAKgH,YAAYtB,GAASyB,QAAQ5B,cAAcC,QAAQ,KAAM,IACvEwD,OAAQ,CACNC,WAAYV,EAAW3G,SAAS,OAChCsH,aAAc,CACVvB,GAAIA,EAAG/F,SAAS,QAEpBmG,OAAQtB,EAAQsB,OAChBH,IAAKA,EACLuB,UAAWlB,EACXU,IAAKA,KAWJ9B,EAAArH,UAAA4J,iBAAQC,EAAoB9B,GACjC,GAAwB,iBAAbA,EAAyB,MAAM,IAAI7G,MAAM,wBACpD,GAAwB,iBAAb2I,EAAyB,MAAM,IAAI3I,MAAM,gCACpD,GAAyB,IAArB2I,EAAST,QAAiB,MAAM,IAAIlI,MAAM,mBAE9C,IAAI+G,EACJ1C,EAAAsE,EAAAL,OAAQpB,EAAA7C,EAAA6C,IAAKuB,EAAApE,EAAAoE,UAAWD,EAAAnE,EAAAmE,aAAcnB,EAAAhD,EAAAgD,OAChCL,EAAMxH,OAAOY,KAAKyG,EAAU,QAC5BX,EAAO1G,OAAOY,KAAKqI,EAAUvC,KAAM,OACnCe,EAAKzH,OAAOY,KAAKoI,EAAavB,GAAI,OAExC,GAAY,WAARC,EAAkB,CACZ,IAAA1E,EAAAiG,EAAAjG,EAAGU,EAAAuF,EAAAvF,EAAGR,EAAA+F,EAAA/F,EAAG0E,EAAAqB,EAAArB,MACjBL,EAAaW,EAASV,EAAKd,EAAM1D,EAAGU,EAAGR,EAAG0E,OAGvC,CAAA,GAAY,WAARF,EAKP,MAAM,IAAIlH,MAAM,qCAJhB,GAAsB,gBAAlByI,EAAUjB,IAAyB,MAAM,IAAIxH,MAAM,oCAC/C,IAAAmH,EAAAsB,EAAAtB,EAAGC,EAAAqB,EAAArB,MACXL,EAAaU,EAAAA,WAAWT,EAAKd,EAAMiB,EAAGC,EAAO,UAK/C,IAAMS,EAAarI,OAAOY,KAAKuI,EAASL,OAAOC,WAAY,OAI3D,GAHYnE,EAAAA,UAAU5E,OAAOC,OAAO,CAAEsH,EAAWhH,MAAM,GAAI,IAAK8H,KACjD/C,QAAQ,KAAM,MAEjB6D,EAASL,OAAOL,IAC1B,MAAM,IAAIjI,MAAM,mDAGlB,IAAM4I,EAAWC,EAAAA,iBAAiBxB,EAAQN,EAAWhH,MAAM,EAAG,IAAKkH,GAC7D6B,EAAOtJ,OAAOC,OAAO,CAAEmJ,EAASd,OAAOD,GAAae,EAASb,aAEnE,OAAOzI,KAAKgH,YAAYwC,wBAlI3B9G,EAAAA,WAAUC,KAAA,CAAC,CAACC,WAAYvD,4JCAvB,SAAAoK,EACUC,EACAC,EACAC,GAFA5J,KAAA0J,SAAAA,EACA1J,KAAA2J,OAAAA,EACA3J,KAAA4J,SAAAA,qBARc,IAAIC,EAAAA,gBAA6B,0BAChC,IAAIA,EAAAA,gBAAwB,sBACjC7J,KAAK8J,cAAcC,6BACrB/J,KAAKgK,eAAeD,eAOpC/J,KAAK8J,cAAc/F,KAAK/D,KAAKiK,yCAI/BnH,OAAAoH,eAAIT,EAAAjK,UAAA,iBAAc,KAAlB,WACE,OAAOQ,KAAKgK,eAAeG,gBAI7B,SAAmBC,GACjBpK,KAAKgK,eAAejG,KAAKsD,EAAAA,kBAAkB+C,qCAIrCX,EAAAjK,UAAAyK,qDACN,OAAO,IAAItK,MAAM0K,aAAavK,QAAQwK,KAAK,MACxCC,OAAO,SAACC,EAAqBC,EAAY5K,GACxC,MAAM6G,EAAM2D,aAAa3D,IAAI7G,GAC7B,OAAO6K,EAAAA,qBAAqBhE,QACpB8D,IAAMzF,EAAA,IAAG2B,GAAMiE,EAAKC,YAAYlE,GAAI3B,IAAAlC,EAAA,GACpC2H,IACP,KAOAf,EAAAjK,UAAAoL,qBAAYzD,GACjB,IAAM0D,EAAWxD,EAAAA,kBAAkBF,GACnC,OAAO2D,KAAKC,MAAMV,aAAaW,QAAQH,KAIlCpB,EAAAjK,UAAAyL,uBACL,OAAOjL,KAAKkL,WAAWC,KAAKC,EAAAA,IAAI,SAAAZ,GAAU,OAAA1H,OAAOuI,KAAKb,OAOjDf,EAAAjK,UAAAsH,kBACL,OAAO9G,KAAK4J,SAAS9C,UAQhB2C,EAAAjK,UAAA8L,cAAKlB,EAAqB7C,GACvB,IAAAJ,EAAAiD,EAAAjD,QAAS5C,EAAA6F,EAAA7F,WACX8E,EAAWrJ,KAAKsH,QAAQ/C,EAAYgD,GAE1C8C,aAAakB,QAAQpE,EAAS2D,KAAKU,UAAUnC,IAC7CrJ,KAAK8J,cAAc/F,KAAK/D,KAAKiK,mCASxBR,EAAAjK,UAAA8H,iBAAQ/C,EAAoBgD,EAAkBd,GACnD,OAAOzG,KAAK4J,SAAStC,QAAQ/C,EAAYgD,EAAUd,IAQ9CgD,EAAAjK,UAAA4J,iBAAQC,EAAoB9B,GACjC,OAAOvH,KAAK4J,SAASR,QAAQC,EAAU9B,IAYlCkC,EAAAjK,UAAAiM,yBAAgBjH,EAAcD,GAC3B,IAAAU,EAAAjF,KAAAsE,OAAAE,EAAAD,GAAAU,eACR,OAAOjF,KAAK0L,mBAAmBzG,IAO1BwE,EAAAjK,UAAAkM,4BAAmBhH,GACxB,OAAO1E,KAAK0J,SAASiC,IAAY,yBAA0B,CAACjH,KAQvD+E,EAAAjK,UAAA8E,gBAAOE,EAAcD,GAC1B,OAAOvE,KAAK2J,OAAOrF,OAAOC,EAAYC,EAAIxE,KAAK0J,SAASb,KAanDY,EAAAjK,UAAAwF,cAAKgB,EAAiBmB,EAAiBI,cAC5C,OAAOvH,KAAKkL,WAAWC,KACrBC,EAAAA,IAAI,SAAAQ,GAAa,OAAAA,EAAUzE,KAC3BiE,EAAAA,IAAI,SAAA/B,GAAY,OAAAsB,EAAKvB,QAAQC,EAAU9B,KACvC6D,EAAAA,IAAI,SAAAS,GAAc,OAAAlB,EAAKmB,YAAY9F,EAAS6F,EAAWtH,gBASpDkF,EAAAjK,UAAAsM,qBAAY9F,EAAiBzB,GAClC,IAAMM,EAAc7E,KAAK2J,OAAO5D,YAAYC,GAC5CjB,EAAA/E,KAAA2J,OAAA3E,KAAAT,EAAAM,GAAOjB,EAAAmB,EAAAnB,EAAGX,EAAA8B,EAAA9B,EACV,MAAO,CAAC+C,QAAOA,EAAEnB,YAAWA,EAAEtE,EADjBwE,EAAAxE,EACoBqD,EAACA,EAAEX,EAACA,EAAE4C,UADvBd,EAAAc,gCAlJnBnD,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAYmJ,EAAAA,6DAbAC,EAAAA,oBAIjB5H,SADAyC","sourcesContent":["import { NgModule } from '@angular/core';\n@NgModule()\nexport class WalletModule {}\n","import { Injectable } from '@angular/core';\r\nimport { WalletModule } from '../wallet.module';\r\nimport * as assert from 'assert';\r\nimport { Buffer } from 'buffer';\r\n\r\n/**\r\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\r\n * This private takes in a data, convert it to buffer if not, and a length for recursion\r\n *\r\n * @param data - will be converted to buffer\r\n * @returns  - returns buffer of encoded data\r\n **/\r\n@Injectable({ providedIn: WalletModule })\r\nexport class RLP {\r\n  public encode(input: Buffer | string | number | Array<any>) {\r\n    if (input instanceof Array) {\r\n      const output = []\r\n      for (let i = 0; i < input.length; i++) {\r\n        output.push(this.encode(input[i]))\r\n      }\r\n      const buf = Buffer.concat(output)\r\n      return Buffer.concat([this.encodeLength(buf.length, 192), buf])\r\n    } else {\r\n      input = this.toBuffer(input);\r\n      if (input.length === 1 && input[0] < 128) {\r\n        return input\r\n      } else {\r\n        return Buffer.concat([this.encodeLength(input.length, 128), input])\r\n      }\r\n    }\r\n  }\r\n\r\n  private safeParseInt (v, base) {\r\n    if (v.slice(0, 2) === '00') {\r\n      throw (new Error('invalid RLP: extra zeros'))\r\n    }\r\n    return parseInt(v, base)\r\n  }\r\n\r\n  private encodeLength (len, offset) {\r\n    if (len < 56) {\r\n      return Buffer.from([len + offset])\r\n    } else {\r\n      const hexLength = this.intToHex(len)\r\n      const lLength = hexLength.length / 2\r\n      const firstByte = this.intToHex(offset + 55 + lLength)\r\n      return Buffer.from(firstByte + hexLength, 'hex')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/RLP}\r\n   * @param data - will be converted to buffer\r\n   * @returns - returns decode Array of Buffers containg the original message\r\n   **/\r\n  public decode(input: Buffer | string, stream?: boolean): Buffer | Array<any> {\r\n    if (!input || input.length === 0) {\r\n      return Buffer.from([]);\r\n    }\r\n\r\n    input = this.toBuffer(input);\r\n    const decoded = this._decode(input);\r\n\r\n    if (stream) {\r\n      return decoded as any;\r\n    }\r\n\r\n    assert.equal(decoded.remainder.length, 0, 'invalid remainder');\r\n    return decoded.data;\r\n  }\r\n\r\n  public getLength(input: string | Buffer): number | Buffer {\r\n    if (!input || input.length === 0) {\r\n      return Buffer.from([])\r\n    }\r\n\r\n    input = this.toBuffer(input)\r\n    const firstByte = input[0]\r\n    if (firstByte <= 0x7f) {\r\n      return input.length\r\n    } else if (firstByte <= 0xb7) {\r\n      return firstByte - 0x7f\r\n    } else if (firstByte <= 0xbf) {\r\n      return firstByte - 0xb6\r\n    } else if (firstByte <= 0xf7) {\r\n      // a list between  0-55 bytes long\r\n      return firstByte - 0xbf\r\n    } else {\r\n      // a list  over 55 bytes long\r\n      const llength = firstByte - 0xf6\r\n      const length = this.safeParseInt(input.slice(1, llength).toString('hex'), 16)\r\n      return llength + length\r\n    }\r\n  }\r\n\r\n  private _decode (input: Buffer) {\r\n    let length, llength, data, innerRemainder, d;\r\n    const decoded = []\r\n    const firstByte = input[0]\r\n\r\n    if (firstByte <= 0x7f) {\r\n      // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\r\n      return {\r\n        data: input.slice(0, 1),\r\n        remainder: input.slice(1)\r\n      }\r\n    } else if (firstByte <= 0xb7) {\r\n      // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\r\n      // The range of the first byte is [0x80, 0xb7]\r\n      length = firstByte - 0x7f\r\n\r\n      // set 0x80 null to 0\r\n      if (firstByte === 0x80) {\r\n        data = Buffer.from([])\r\n      } else {\r\n        data = input.slice(1, length)\r\n      }\r\n\r\n      if (length === 2 && data[0] < 0x80) {\r\n        throw new Error('invalid rlp encoding: byte must be less 0x80')\r\n      }\r\n\r\n      return {\r\n        data: data,\r\n        remainder: input.slice(length)\r\n      }\r\n    } else if (firstByte <= 0xbf) {\r\n      llength = firstByte - 0xb6\r\n      length = this.safeParseInt(input.slice(1, llength).toString('hex'), 16)\r\n      data = input.slice(llength, length + llength)\r\n      if (data.length < length) {\r\n        throw (new Error('invalid RLP'))\r\n      }\r\n\r\n      return {\r\n        data: data,\r\n        remainder: input.slice(length + llength)\r\n      }\r\n    } else if (firstByte <= 0xf7) {\r\n      // a list between  0-55 bytes long\r\n      length = firstByte - 0xbf\r\n      innerRemainder = input.slice(1, length)\r\n      while (innerRemainder.length) {\r\n        d = this._decode(innerRemainder)\r\n        decoded.push(d.data)\r\n        innerRemainder = d.remainder\r\n      }\r\n\r\n      return {\r\n        data: decoded,\r\n        remainder: input.slice(length)\r\n      }\r\n    } else {\r\n      // a list  over 55 bytes long\r\n      llength = firstByte - 0xf6\r\n      length = this.safeParseInt(input.slice(1, llength).toString('hex'), 16)\r\n      const totalLength = llength + length\r\n      if (totalLength > input.length) {\r\n        throw new Error('invalid rlp: total length is larger than the data')\r\n      }\r\n\r\n      innerRemainder = input.slice(llength, totalLength)\r\n      if (innerRemainder.length === 0) {\r\n        throw new Error('invalid rlp, List has a invalid length')\r\n      }\r\n\r\n      while (innerRemainder.length) {\r\n        d = this._decode(innerRemainder)\r\n        decoded.push(d.data)\r\n        innerRemainder = d.remainder\r\n      }\r\n      return {\r\n        data: decoded,\r\n        remainder: input.slice(totalLength)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * HELPERS : TO REMOVE\r\n   */\r\n\r\n  private isHexPrefixed(str): boolean {\r\n    return str.slice(0, 2) === '0x'\r\n  }\r\n\r\n  // Removes 0x from a given String\r\n  private stripHexPrefix(str: string): string {\r\n    if (typeof str !== 'string') {\r\n      return str\r\n    }\r\n    return this.isHexPrefixed(str) ? str.slice(2) : str\r\n  }\r\n\r\n  private intToHex(i: number): string {\r\n    let hex = i.toString(16)\r\n    if (hex.length % 2) {\r\n      hex = '0' + hex\r\n    }\r\n    return hex\r\n  }\r\n\r\n  private padToEven(a: string): string {\r\n    if (a.length % 2) a = '0' + a\r\n    return a\r\n  }\r\n\r\n  private intToBuffer(i: number): Buffer {\r\n    const hex = this.intToHex(i)\r\n    return Buffer.from(hex, 'hex')\r\n  }\r\n\r\n  private toBuffer(v: any): Buffer {\r\n    if (!Buffer.isBuffer(v)) {\r\n      if (typeof v === 'string') {\r\n        if (this.isHexPrefixed(v)) {\r\n          v = Buffer.from(this.padToEven(this.stripHexPrefix(v)), 'hex')\r\n        } else {\r\n          v = Buffer.from(v)\r\n        }\r\n      } else if (typeof v === 'number') {\r\n        if (!v) {\r\n          v = Buffer.from([])\r\n        } else {\r\n          v = this.intToBuffer(v)\r\n        }\r\n      } else if (v === null || v === undefined) {\r\n        v = Buffer.from([])\r\n      } else if (v.toArray) {\r\n        // converts a BN to a Buffer\r\n        v = Buffer.from(v.toArray())\r\n      } else {\r\n        throw new Error('invalid type')\r\n      }\r\n    }\r\n    return v\r\n  }\r\n}\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TxObject, keccak256, isHexStrict, hexToBytes } from '@ngeth/utils';\r\nimport { WalletModule } from './../wallet.module';\r\nimport { RLP } from './rlp';\r\nimport { Buffer } from 'buffer';\r\nimport { sign } from 'secp256k1';\r\n\r\n\r\n@Injectable({ providedIn: WalletModule })\r\nexport class Signer {\r\n\r\n  constructor(private rlp: RLP) {}\r\n\r\n  /**\r\n   * Sign a raw transaction\r\n   * @param privateKey The private key to sign the transaction with\r\n   * @param tx The transaction to sign\r\n   * @param chainId The id of the chain\r\n   */\r\n  public signTx(privateKey: string, tx: TxObject, chainId?: number) {\r\n    // Format TX\r\n    const rawTx = this.rawTx(tx);\r\n    const rawChain = [ '0x' + (chainId || 1).toString(16), '0x', '0x' ];\r\n\r\n    // RLP encode with chainId (EIP155: prevent replay attack)\r\n    const rlpEncoded = this.rlp.encode([...rawTx, ...rawChain]);\r\n\r\n    // Hash\r\n    const messageHash = keccak256(rlpEncoded);\r\n\r\n    // Sign\r\n    const { r, s, v } = this.sign(privateKey, messageHash, chainId);\r\n\r\n    // RLP Encode with signature\r\n    const rlpTx = this.rlp.encode([...rawTx, ...[v, r, s]]);\r\n    const rawTransaction = '0x' +  rlpTx.toString('hex');\r\n\r\n    return { messageHash, r, s, v, rawTransaction };\r\n  }\r\n\r\n  /**\r\n   * Recover a transaction based on its raw value\r\n   * @param rawTx The raw transaction format\r\n   */\r\n  public recoverTx(rawTx: string) {\r\n\r\n  }\r\n\r\n  /**\r\n   * Format the transaction\r\n   * @param tx The Transaction to encode\r\n   */\r\n  private rawTx(tx: TxObject): any[] {\r\n    return [\r\n      '0x' + (tx.nonce || ''),\r\n      '0x' + (tx.gasPrice || ''),\r\n      '0x' + (tx.gas || ''),\r\n      '0x' + tx.to.toLowerCase().replace('0x', '') || '',\r\n      '0x' + (tx.value || ''),\r\n      '0x' + (tx.data || '')\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Sign a hash\r\n   * @param privateKey The private key needed to sign the hash\r\n   * @param hash The hash to sign\r\n   * @param chainId The Id of the chain\r\n    */\r\n  public sign(privateKey: string, hash: string, chainId?: number) {\r\n    const privKey = Buffer.from(privateKey.replace('0x', ''), 'hex');\r\n    const data = Buffer.from(hash.replace('0x', ''), 'hex');\r\n    const addToV = (chainId && chainId > 0) ? chainId * 2 + 8 : 0;\r\n    const { signature, recovery } = sign(data, privKey);\r\n    const r = signature.toString('hex', 0, 32);\r\n    const s = signature.toString('hex', 32, 64);\r\n    const v = (recovery + 27 + addToV).toString(16);\r\n    return {\r\n      r: '0x'+r,\r\n      s: '0x'+s,\r\n      v: '0x'+v,\r\n      signature: `0x${r}${s}${v}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Hash a message with the preamble \"\\x19Ethereum Signed Message:\\n\"\r\n   * @param message The message to sign\r\n   */\r\n  public hashMessage(message: string): string {\r\n    const msg = isHexStrict(message) ? message : hexToBytes(message);\r\n    const msgBuffer = Buffer.from(msg as string);\r\n    const preamble = '\\x19Ethereum Signed Message:\\n' + msg.length;\r\n    const preambleBuffer = Buffer.from(preamble);\r\n    const ethMsg = Buffer.concat([preambleBuffer, msgBuffer]);\r\n    return keccak256(ethMsg);\r\n  }\r\n}\r\n","import { randomBytes } from 'crypto-browserify';\r\n\r\nexport class EncryptOptions {\r\n  public salt: Buffer | string = randomBytes(32);\r\n  public iv: Buffer = randomBytes(16);\r\n  public kdf: 'pbkdf2' | 'scrypt' = 'scrypt';\r\n  public c = 262144;\r\n  public prf: 'hmac-sha256';\r\n  public dklen = 32;\r\n  public n: 2048 | 4096 | 8192 | 16384 = 8192;\r\n  public r = 8;\r\n  public p = 1;\r\n  public cipher: 'aes-128-ctr' | string = 'aes-128-ctr';\r\n  public uuid: Buffer = randomBytes(16);\r\n  constructor(options?: Partial<EncryptOptions>) {\r\n    for (const key in options) {\r\n      if (this.hasOwnProperty(key)) {\r\n        this[key] = options[key];\r\n      }\r\n    }\r\n    // Transform salt to be a Buffer\r\n    if (options && typeof options.salt === 'string') {\r\n      this.salt = Buffer.from(options.salt.replace('0x', ''), 'hex')\r\n    }\r\n  }\r\n}\r\n\r\nexport interface Keystore {\r\n  version: 3;\r\n  id: string;\r\n  address: string;\r\n  crypto: {\r\n    ciphertext: string;\r\n    cipherparams: {\r\n        iv: string;\r\n    },\r\n    cipher: string;\r\n    kdf: string;\r\n    kdfparams: {\r\n      dklen: number;\r\n      salt: string;\r\n      // For scrypt encryption\r\n      n?: number;\r\n      p?: number;\r\n      r?: number;\r\n      // For pbkdf2 encryption\r\n      c?: number;\r\n      prf?: 'hmac-sha256';\r\n    };\r\n    mac: string;\r\n  }\r\n}\r\n","/**\r\n * Ressources\r\n * https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { WalletModule } from './../wallet.module';\r\n\r\nimport { v4 } from 'uuid';\r\nimport { toChecksumAddress, keccak256 } from '@ngeth/utils';\r\nimport { privateKeyVerify, publicKeyCreate } from 'secp256k1';\r\nimport { randomBytes, pbkdf2Sync, createCipheriv, createDecipheriv } from 'crypto-browserify';\r\nimport { EncryptOptions, Keystore } from './encryption';\r\nimport scryptsy from 'scrypt.js';\r\n\r\nexport interface EthAccount {\r\n  privateKey: string;\r\n  address: string;\r\n}\r\n\r\n\r\n@Injectable({providedIn: WalletModule})\r\nexport class Accounts {\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Create an Ethereum keypair\r\n   */\r\n  public create(): EthAccount {\r\n    let privKey: Buffer;\r\n    do { privKey = randomBytes(32); }\r\n    while (!privateKeyVerify(privKey));\r\n    return this.fromPrivate(privKey);\r\n  }\r\n\r\n  /**\r\n   * Create an account from a private key\r\n   * @param privateKey The private key without the prefix '0x'\r\n   */\r\n  public fromPrivate(privateKey: string | Buffer): EthAccount {\r\n    if (typeof privateKey === 'string') {\r\n      privateKey = Buffer.from([privateKey.replace('0x', '')]);\r\n    }\r\n    // Slice(1) is to drop type byte which is hardcoded as 04 ethereum.\r\n    const pubKey = publicKeyCreate(privateKey, false).slice(1);\r\n    const address = '0x' + keccak256(pubKey).substring(26);\r\n    return {\r\n      privateKey: '0x' + privateKey.toString('hex'),\r\n      address: toChecksumAddress(address)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Encrypt an private key into a keystore\r\n   * @param privateKey The private key to encrypt\r\n   * @param password The password to encrypt the private key with\r\n   * @param encryptOptions A list of options to encrypt the private key\r\n   * Code from : https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-accounts/src/index.js\r\n   */\r\n  public encrypt(\r\n    privateKey: string,\r\n    password: string,\r\n    encryptOptions?: Partial<EncryptOptions>): Keystore\r\n  {\r\n    const pwd = Buffer.from(password);\r\n    const privKey = Buffer.from(privateKey.replace('0x', ''), 'hex');\r\n    const options = new EncryptOptions(encryptOptions);\r\n    const { salt, iv, kdf, c, n, r, p, dklen, cipher, uuid } = options;\r\n    const kdfParams: Keystore['crypto']['kdfparams'] = {\r\n      dklen: dklen,\r\n      salt: (salt as Buffer).toString('hex')\r\n    };\r\n\r\n    let derivedKey;\r\n    if (kdf === 'pbkdf2') {\r\n      kdfParams.c = c;\r\n      kdfParams.prf = 'hmac-sha256';\r\n      derivedKey = pbkdf2Sync(pwd, salt, c, dklen, 'sha256');\r\n    } else if (kdf === 'scrypt') {\r\n      kdfParams.n = n;\r\n      kdfParams.r = r;\r\n      kdfParams.p = p;\r\n      derivedKey = scryptsy(pwd, salt, n, r, p, dklen);\r\n    } else {\r\n      throw new Error('Unsupported Key Derivation Function' + kdf);\r\n    }\r\n\r\n    const cipherAlg = createCipheriv(cipher, derivedKey.slice(0, 16), iv);\r\n    if (!cipherAlg) { throw new Error('Unsupported cipher ' + cipher)}\r\n    const cipherText = Buffer.concat([cipherAlg.update(privKey), cipherAlg.final()]);\r\n    const toMac = Buffer.concat([derivedKey.slice(16, 32), cipherText]);\r\n    const mac = keccak256(toMac).replace('0x', '');\r\n    return {\r\n      version: 3,\r\n      id: v4({ random: uuid as any }),\r\n      address: this.fromPrivate(privKey).address.toLowerCase().replace('0x', ''),\r\n      crypto: {\r\n        ciphertext: cipherText.toString('hex'),\r\n        cipherparams: {\r\n            iv: iv.toString('hex')\r\n        },\r\n        cipher: options.cipher,\r\n        kdf: kdf,\r\n        kdfparams: kdfParams,\r\n        mac: mac\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt a keystore object\r\n   * @param keystore The keystore object\r\n   * @param password The password to decrypt the keystore with\r\n   * Code from : https://github.com/ethereumjs/ethereumjs-wallet/blob/master/index.js\r\n   */\r\n  public decrypt(keystore: Keystore, password: string): EthAccount {\r\n    if (typeof password !== 'string') { throw new Error('No password provided'); }\r\n    if (typeof keystore !== 'object') { throw new Error('keystore should be an object'); }\r\n    if (keystore.version !== 3) { throw new Error('Not a V3 wallet'); }\r\n\r\n    let derivedKey;\r\n    const { kdf, kdfparams, cipherparams, cipher } = keystore.crypto;\r\n    const pwd = Buffer.from(password, 'utf8');\r\n    const salt = Buffer.from(kdfparams.salt, 'hex');\r\n    const iv = Buffer.from(cipherparams.iv, 'hex');\r\n    // Scrypt encryption\r\n    if (kdf === 'scrypt') {\r\n      const { n, r, p, dklen } = kdfparams;\r\n      derivedKey = scryptsy(pwd, salt, n, r, p, dklen)\r\n    }\r\n    // pbkdf2 encryption\r\n    else if (kdf === 'pbkdf2') {\r\n      if (kdfparams.prf !== 'hmac-sha256') { throw new Error('Unsupported parameters to PBKDF2'); }\r\n      const { c, dklen } = kdfparams;\r\n      derivedKey = pbkdf2Sync(pwd, salt, c, dklen, 'sha256')\r\n    } else {\r\n      throw new Error('Unsupported key derivation scheme')\r\n    }\r\n\r\n    const cipherText = Buffer.from(keystore.crypto.ciphertext, 'hex');\r\n    const mac = keccak256(Buffer.concat([ derivedKey.slice(16, 32), cipherText ]))\r\n                  .replace('0x', '');\r\n\r\n    if (mac !== keystore.crypto.mac) {\r\n      throw new Error('Key derivation failed - possibly wrong password')\r\n    }\r\n\r\n    const decipher = createDecipheriv(cipher, derivedKey.slice(0, 16), iv);\r\n    const seed = Buffer.concat([ decipher.update(cipherText), decipher.final() ]);\r\n\r\n    return this.fromPrivate(seed);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ProvidersModule, MainProvider, Auth } from '@ngeth/provider';\r\nimport { TxObject, toChecksumAddress, checkAddressChecksum } from '@ngeth/utils';\r\n\r\nimport { Accounts, EncryptOptions, Keystore, EthAccount } from './account';\r\nimport { Signer } from './signature/signer';\r\n\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface KeystoreMap {\r\n  [address: string]: Keystore;\r\n}\r\n\r\n@Injectable({ providedIn: ProvidersModule})\r\nexport class Wallet implements Auth {\r\n  private localKeystore = new BehaviorSubject<KeystoreMap>(null);\r\n  private currentAccount = new BehaviorSubject<string>(null);\r\n  public keystores$ = this.localKeystore.asObservable();\r\n  public account$ = this.currentAccount.asObservable();\r\n\r\n  constructor(\r\n    private provider: MainProvider,\r\n    private signer: Signer,\r\n    private accounts: Accounts\r\n  ) {\r\n    this.localKeystore.next(this.getKeystoreMapFromLocalStorage());\r\n  }\r\n\r\n  /** Get the default account */\r\n  get defaultAccount(): string {\r\n    return this.currentAccount.getValue();\r\n  }\r\n\r\n  /** Set the default account */\r\n  set defaultAccount(account: string) {\r\n    this.currentAccount.next(toChecksumAddress(account));\r\n  }\r\n\r\n  /** Return the keystore map from the localstore */\r\n  private getKeystoreMapFromLocalStorage(): KeystoreMap {\r\n    return new Array(localStorage.length).fill(null)\r\n      .reduce((keyMap: KeystoreMap, none: null, i: number) => {\r\n        const key = localStorage.key(i);\r\n        return checkAddressChecksum(key)\r\n          ? {...keyMap, [key]: this.getKeystore(key) }\r\n          : {...keyMap};\r\n      }, {});\r\n  }\r\n\r\n  /**\r\n   * Get a specific keystore depending on its address\r\n   * @param address The address of the keystore\r\n   */\r\n  public getKeystore(address: string): Keystore {\r\n    const checkSum = toChecksumAddress(address);\r\n    return JSON.parse(localStorage.getItem(checkSum));\r\n  }\r\n\r\n  /** Return the list of addresses available in the localStorage */\r\n  public getAccounts(): Observable<string[]> {\r\n    return this.keystores$.pipe(map(keyMap => Object.keys(keyMap)));\r\n  }\r\n\r\n\r\n  /**\r\n   * Create an account\r\n   */\r\n  public create() {\r\n    return this.accounts.create();\r\n  }\r\n\r\n  /**\r\n   * Save an account into the localstorage\r\n   * @param account The key pair account\r\n   * @param password The password to encrypt the account with\r\n   */\r\n  public save(account: EthAccount, password: string) {\r\n    const { address, privateKey } = account;\r\n    const keystore = this.encrypt(privateKey, password);\r\n    // Update allKeystore\r\n    localStorage.setItem(address, JSON.stringify(keystore));\r\n    this.localKeystore.next(this.getKeystoreMapFromLocalStorage());\r\n  }\r\n\r\n  /**\r\n   * Encrypt an private key into a keystore\r\n   * @param privateKey The private key to encrypt\r\n   * @param password The password to encrypt the private key with\r\n   * @param options A list of options to encrypt the private key\r\n   */\r\n  public encrypt(privateKey: string, password: string, options?: Partial<EncryptOptions>) {\r\n    return this.accounts.encrypt(privateKey, password, options);\r\n  }\r\n\r\n  /**\r\n   * Decrypt a keystore object\r\n   * @param keystore The keystore object\r\n   * @param password The password to decrypt the keystore with\r\n   */\r\n  public decrypt(keystore: Keystore, password: string) {\r\n    return this.accounts.decrypt(keystore, password);\r\n  }\r\n\r\n  /*************\r\n   * TRANSACTION\r\n   *************/\r\n\r\n  /**\r\n   * Send a transaction by signing it\r\n   * @param tx The transaction to send\r\n   * @param privateKey The private key to sign the transaction with\r\n   */\r\n  public sendTransaction(tx: TxObject, privateKey: string) {\r\n    const { rawTransaction } = this.signTx(tx, privateKey);\r\n    return this.sendRawTransaction(rawTransaction);\r\n  }\r\n\r\n  /**\r\n   * Send a transaction to the node\r\n   * @param rawTx The signed transaction data.\r\n   */\r\n  public sendRawTransaction(rawTx: string): Observable<string> {\r\n    return this.provider.rpc<string>('eth_sendRawTransaction', [rawTx]);\r\n  }\r\n\r\n  /**\r\n   * Sign a transaction with a private key\r\n   * @param tx The transaction to sign\r\n   * @param privateKey The private key to sign the transaction with\r\n   */\r\n  public signTx(tx: TxObject, privateKey: string) {\r\n    return this.signer.signTx(privateKey, tx, this.provider.id);\r\n  }\r\n\r\n  /***********\r\n   * SIGNATURE\r\n   */\r\n\r\n  /**\r\n   * Sign a message\r\n   * @param message the message to sign\r\n   * @param address the address to sign the message with\r\n   * @param password the password needed to decrypt the private key\r\n   */\r\n  public sign(message: string, address: string, password: string) {\r\n    return this.keystores$.pipe(\r\n      map(keystores => keystores[address]),\r\n      map(keystore => this.decrypt(keystore, password)),\r\n      map(ethAccount => this.signMessage(message, ethAccount.privateKey))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sign a message with the private key\r\n   * @param message The message to sign\r\n   * @param privateKey The private key to sign the message with\r\n   */\r\n  public signMessage(message: string, privateKey: string) {\r\n    const messageHash = this.signer.hashMessage(message);\r\n    const {r, s, v, signature} = this.signer.sign(privateKey, messageHash);\r\n    return {message, messageHash, v, r, s, signature};\r\n  }\r\n\r\n}\r\n"]}