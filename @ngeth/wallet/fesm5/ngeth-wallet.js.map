{"version":3,"file":"ngeth-wallet.js.map","sources":["ng://@ngeth/wallet/lib/wallet.module.ts","ng://@ngeth/wallet/lib/signature/rlp.ts","ng://@ngeth/wallet/lib/signature/signer.ts","ng://@ngeth/wallet/lib/account/encryption.ts","ng://@ngeth/wallet/lib/account/account.ts","ng://@ngeth/wallet/lib/wallet.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\n@NgModule()\nexport class WalletModule {}\n","import { Injectable } from '@angular/core';\r\nimport { WalletModule } from '../wallet.module';\r\nimport * as assert from 'assert';\r\nimport { Buffer } from 'buffer';\r\n\r\n/**\r\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\r\n * This private takes in a data, convert it to buffer if not, and a length for recursion\r\n *\r\n * @param data - will be converted to buffer\r\n * @returns  - returns buffer of encoded data\r\n **/\r\n@Injectable({ providedIn: WalletModule })\r\nexport class RLP {\r\n  public encode(input: Buffer | string | number | Array<any>) {\r\n    if (input instanceof Array) {\r\n      const output = []\r\n      for (let i = 0; i < input.length; i++) {\r\n        output.push(this.encode(input[i]))\r\n      }\r\n      const buf = Buffer.concat(output)\r\n      return Buffer.concat([this.encodeLength(buf.length, 192), buf])\r\n    } else {\r\n      input = this.toBuffer(input);\r\n      if (input.length === 1 && input[0] < 128) {\r\n        return input\r\n      } else {\r\n        return Buffer.concat([this.encodeLength(input.length, 128), input])\r\n      }\r\n    }\r\n  }\r\n\r\n  private safeParseInt (v, base) {\r\n    if (v.slice(0, 2) === '00') {\r\n      throw (new Error('invalid RLP: extra zeros'))\r\n    }\r\n    return parseInt(v, base)\r\n  }\r\n\r\n  private encodeLength (len, offset) {\r\n    if (len < 56) {\r\n      return Buffer.from([len + offset])\r\n    } else {\r\n      const hexLength = this.intToHex(len)\r\n      const lLength = hexLength.length / 2\r\n      const firstByte = this.intToHex(offset + 55 + lLength)\r\n      return Buffer.from(firstByte + hexLength, 'hex')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/RLP}\r\n   * @param data - will be converted to buffer\r\n   * @returns - returns decode Array of Buffers containg the original message\r\n   **/\r\n  public decode(input: Buffer | string, stream?: boolean): Buffer | Array<any> {\r\n    if (!input || input.length === 0) {\r\n      return Buffer.from([]);\r\n    }\r\n\r\n    input = this.toBuffer(input);\r\n    const decoded = this._decode(input);\r\n\r\n    if (stream) {\r\n      return decoded as any;\r\n    }\r\n\r\n    assert.equal(decoded.remainder.length, 0, 'invalid remainder');\r\n    return decoded.data;\r\n  }\r\n\r\n  public getLength(input: string | Buffer): number | Buffer {\r\n    if (!input || input.length === 0) {\r\n      return Buffer.from([])\r\n    }\r\n\r\n    input = this.toBuffer(input)\r\n    const firstByte = input[0]\r\n    if (firstByte <= 0x7f) {\r\n      return input.length\r\n    } else if (firstByte <= 0xb7) {\r\n      return firstByte - 0x7f\r\n    } else if (firstByte <= 0xbf) {\r\n      return firstByte - 0xb6\r\n    } else if (firstByte <= 0xf7) {\r\n      // a list between  0-55 bytes long\r\n      return firstByte - 0xbf\r\n    } else {\r\n      // a list  over 55 bytes long\r\n      const llength = firstByte - 0xf6\r\n      const length = this.safeParseInt(input.slice(1, llength).toString('hex'), 16)\r\n      return llength + length\r\n    }\r\n  }\r\n\r\n  private _decode (input: Buffer) {\r\n    let length, llength, data, innerRemainder, d;\r\n    const decoded = []\r\n    const firstByte = input[0]\r\n\r\n    if (firstByte <= 0x7f) {\r\n      // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\r\n      return {\r\n        data: input.slice(0, 1),\r\n        remainder: input.slice(1)\r\n      }\r\n    } else if (firstByte <= 0xb7) {\r\n      // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\r\n      // The range of the first byte is [0x80, 0xb7]\r\n      length = firstByte - 0x7f\r\n\r\n      // set 0x80 null to 0\r\n      if (firstByte === 0x80) {\r\n        data = Buffer.from([])\r\n      } else {\r\n        data = input.slice(1, length)\r\n      }\r\n\r\n      if (length === 2 && data[0] < 0x80) {\r\n        throw new Error('invalid rlp encoding: byte must be less 0x80')\r\n      }\r\n\r\n      return {\r\n        data: data,\r\n        remainder: input.slice(length)\r\n      }\r\n    } else if (firstByte <= 0xbf) {\r\n      llength = firstByte - 0xb6\r\n      length = this.safeParseInt(input.slice(1, llength).toString('hex'), 16)\r\n      data = input.slice(llength, length + llength)\r\n      if (data.length < length) {\r\n        throw (new Error('invalid RLP'))\r\n      }\r\n\r\n      return {\r\n        data: data,\r\n        remainder: input.slice(length + llength)\r\n      }\r\n    } else if (firstByte <= 0xf7) {\r\n      // a list between  0-55 bytes long\r\n      length = firstByte - 0xbf\r\n      innerRemainder = input.slice(1, length)\r\n      while (innerRemainder.length) {\r\n        d = this._decode(innerRemainder)\r\n        decoded.push(d.data)\r\n        innerRemainder = d.remainder\r\n      }\r\n\r\n      return {\r\n        data: decoded,\r\n        remainder: input.slice(length)\r\n      }\r\n    } else {\r\n      // a list  over 55 bytes long\r\n      llength = firstByte - 0xf6\r\n      length = this.safeParseInt(input.slice(1, llength).toString('hex'), 16)\r\n      const totalLength = llength + length\r\n      if (totalLength > input.length) {\r\n        throw new Error('invalid rlp: total length is larger than the data')\r\n      }\r\n\r\n      innerRemainder = input.slice(llength, totalLength)\r\n      if (innerRemainder.length === 0) {\r\n        throw new Error('invalid rlp, List has a invalid length')\r\n      }\r\n\r\n      while (innerRemainder.length) {\r\n        d = this._decode(innerRemainder)\r\n        decoded.push(d.data)\r\n        innerRemainder = d.remainder\r\n      }\r\n      return {\r\n        data: decoded,\r\n        remainder: input.slice(totalLength)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * HELPERS : TO REMOVE\r\n   */\r\n\r\n  private isHexPrefixed(str): boolean {\r\n    return str.slice(0, 2) === '0x'\r\n  }\r\n\r\n  // Removes 0x from a given String\r\n  private stripHexPrefix(str: string): string {\r\n    if (typeof str !== 'string') {\r\n      return str\r\n    }\r\n    return this.isHexPrefixed(str) ? str.slice(2) : str\r\n  }\r\n\r\n  private intToHex(i: number): string {\r\n    let hex = i.toString(16)\r\n    if (hex.length % 2) {\r\n      hex = '0' + hex\r\n    }\r\n    return hex\r\n  }\r\n\r\n  private padToEven(a: string): string {\r\n    if (a.length % 2) a = '0' + a\r\n    return a\r\n  }\r\n\r\n  private intToBuffer(i: number): Buffer {\r\n    const hex = this.intToHex(i)\r\n    return Buffer.from(hex, 'hex')\r\n  }\r\n\r\n  private toBuffer(v: any): Buffer {\r\n    if (!Buffer.isBuffer(v)) {\r\n      if (typeof v === 'string') {\r\n        if (this.isHexPrefixed(v)) {\r\n          v = Buffer.from(this.padToEven(this.stripHexPrefix(v)), 'hex')\r\n        } else {\r\n          v = Buffer.from(v)\r\n        }\r\n      } else if (typeof v === 'number') {\r\n        if (!v) {\r\n          v = Buffer.from([])\r\n        } else {\r\n          v = this.intToBuffer(v)\r\n        }\r\n      } else if (v === null || v === undefined) {\r\n        v = Buffer.from([])\r\n      } else if (v.toArray) {\r\n        // converts a BN to a Buffer\r\n        v = Buffer.from(v.toArray())\r\n      } else {\r\n        throw new Error('invalid type')\r\n      }\r\n    }\r\n    return v\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { TxObject, keccak256, isHexStrict, hexToBytes } from '@ngeth/utils';\r\nimport { WalletModule } from './../wallet.module';\r\nimport { RLP } from './rlp';\r\nimport { Buffer } from 'buffer';\r\nimport { sign } from 'secp256k1';\r\n\r\n\r\n@Injectable({ providedIn: WalletModule })\r\nexport class Signer {\r\n\r\n  constructor(private rlp: RLP) {}\r\n\r\n  /**\r\n   * Sign a raw transaction\r\n   * @param privateKey The private key to sign the transaction with\r\n   * @param tx The transaction to sign\r\n   * @param chainId The id of the chain\r\n   */\r\n  public signTx(privateKey: string, tx: TxObject, chainId?: number) {\r\n    // Format TX\r\n    const rawTx = this.rawTx(tx);\r\n    const rawChain = [ '0x' + (chainId || 1).toString(16), '0x', '0x' ];\r\n\r\n    // RLP encode with chainId (EIP155: prevent replay attack)\r\n    const rlpEncoded = this.rlp.encode([...rawTx, ...rawChain]);\r\n\r\n    // Hash\r\n    const messageHash = keccak256(rlpEncoded);\r\n\r\n    // Sign\r\n    const { r, s, v } = this.sign(privateKey, messageHash, chainId);\r\n\r\n    // RLP Encode with signature\r\n    const rlpTx = this.rlp.encode([...rawTx, ...[v, r, s]]);\r\n    const rawTransaction = '0x' +  rlpTx.toString('hex');\r\n\r\n    return { messageHash, r, s, v, rawTransaction };\r\n  }\r\n\r\n  /**\r\n   * Recover a transaction based on its raw value\r\n   * @param rawTx The raw transaction format\r\n   */\r\n  public recoverTx(rawTx: string) {\r\n\r\n  }\r\n\r\n  /**\r\n   * Format the transaction\r\n   * @param tx The Transaction to encode\r\n   */\r\n  private rawTx(tx: TxObject): any[] {\r\n    return [\r\n      '0x' + (tx.nonce || ''),\r\n      '0x' + (tx.gasPrice || ''),\r\n      '0x' + (tx.gas || ''),\r\n      '0x' + tx.to.toLowerCase().replace('0x', '') || '',\r\n      '0x' + (tx.value || ''),\r\n      '0x' + (tx.data || '')\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Sign a hash\r\n   * @param privateKey The private key needed to sign the hash\r\n   * @param hash The hash to sign\r\n   * @param chainId The Id of the chain\r\n    */\r\n  public sign(privateKey: string, hash: string, chainId?: number) {\r\n    const privKey = Buffer.from(privateKey.replace('0x', ''), 'hex');\r\n    const data = Buffer.from(hash.replace('0x', ''), 'hex');\r\n    const addToV = (chainId && chainId > 0) ? chainId * 2 + 8 : 0;\r\n    const { signature, recovery } = sign(data, privKey);\r\n    const r = signature.toString('hex', 0, 32);\r\n    const s = signature.toString('hex', 32, 64);\r\n    const v = (recovery + 27 + addToV).toString(16);\r\n    return {\r\n      r: '0x'+r,\r\n      s: '0x'+s,\r\n      v: '0x'+v,\r\n      signature: `0x${r}${s}${v}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Hash a message with the preamble \"\\x19Ethereum Signed Message:\\n\"\r\n   * @param message The message to sign\r\n   */\r\n  public hashMessage(message: string): string {\r\n    const msg = isHexStrict(message) ? message : hexToBytes(message);\r\n    const msgBuffer = Buffer.from(msg as string);\r\n    const preamble = '\\x19Ethereum Signed Message:\\n' + msg.length;\r\n    const preambleBuffer = Buffer.from(preamble);\r\n    const ethMsg = Buffer.concat([preambleBuffer, msgBuffer]);\r\n    return keccak256(ethMsg);\r\n  }\r\n}\r\n","import { randomBytes } from 'crypto-browserify';\r\n\r\nexport class EncryptOptions {\r\n  public salt: Buffer | string = randomBytes(32);\r\n  public iv: Buffer = randomBytes(16);\r\n  public kdf: 'pbkdf2' | 'scrypt' = 'scrypt';\r\n  public c = 262144;\r\n  public prf: 'hmac-sha256';\r\n  public dklen = 32;\r\n  public n: 2048 | 4096 | 8192 | 16384 = 8192;\r\n  public r = 8;\r\n  public p = 1;\r\n  public cipher: 'aes-128-ctr' | string = 'aes-128-ctr';\r\n  public uuid: Buffer = randomBytes(16);\r\n  constructor(options?: Partial<EncryptOptions>) {\r\n    for (const key in options) {\r\n      if (this.hasOwnProperty(key)) {\r\n        this[key] = options[key];\r\n      }\r\n    }\r\n    // Transform salt to be a Buffer\r\n    if (options && typeof options.salt === 'string') {\r\n      this.salt = Buffer.from(options.salt.replace('0x', ''), 'hex')\r\n    }\r\n  }\r\n}\r\n\r\nexport interface Keystore {\r\n  version: 3;\r\n  id: string;\r\n  address: string;\r\n  crypto: {\r\n    ciphertext: string;\r\n    cipherparams: {\r\n        iv: string;\r\n    },\r\n    cipher: string;\r\n    kdf: string;\r\n    kdfparams: {\r\n      dklen: number;\r\n      salt: string;\r\n      // For scrypt encryption\r\n      n?: number;\r\n      p?: number;\r\n      r?: number;\r\n      // For pbkdf2 encryption\r\n      c?: number;\r\n      prf?: 'hmac-sha256';\r\n    };\r\n    mac: string;\r\n  }\r\n}\r\n","/**\r\n * Ressources\r\n * https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { WalletModule } from './../wallet.module';\r\n\r\nimport { v4 } from 'uuid';\r\nimport { toChecksumAddress, keccak256 } from '@ngeth/utils';\r\nimport { privateKeyVerify, publicKeyCreate } from 'secp256k1';\r\nimport { randomBytes, pbkdf2Sync, createCipheriv, createDecipheriv } from 'crypto-browserify';\r\nimport { EncryptOptions, Keystore } from './encryption';\r\nimport scryptsy from 'scrypt.js';\r\n\r\nexport interface EthAccount {\r\n  privateKey: string;\r\n  address: string;\r\n}\r\n\r\n\r\n@Injectable({providedIn: WalletModule})\r\nexport class Accounts {\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Create an Ethereum keypair\r\n   */\r\n  public create(): EthAccount {\r\n    let privKey: Buffer;\r\n    do { privKey = randomBytes(32); }\r\n    while (!privateKeyVerify(privKey));\r\n    return this.fromPrivate(privKey);\r\n  }\r\n\r\n  /**\r\n   * Create an account from a private key\r\n   * @param privateKey The private key without the prefix '0x'\r\n   */\r\n  public fromPrivate(privateKey: string | Buffer): EthAccount {\r\n    if (typeof privateKey === 'string') {\r\n      privateKey = Buffer.from([privateKey.replace('0x', '')]);\r\n    }\r\n    // Slice(1) is to drop type byte which is hardcoded as 04 ethereum.\r\n    const pubKey = publicKeyCreate(privateKey, false).slice(1);\r\n    const address = '0x' + keccak256(pubKey).substring(26);\r\n    return {\r\n      privateKey: '0x' + privateKey.toString('hex'),\r\n      address: toChecksumAddress(address)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Encrypt an private key into a keystore\r\n   * @param privateKey The private key to encrypt\r\n   * @param password The password to encrypt the private key with\r\n   * @param encryptOptions A list of options to encrypt the private key\r\n   * Code from : https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-accounts/src/index.js\r\n   */\r\n  public encrypt(\r\n    privateKey: string,\r\n    password: string,\r\n    encryptOptions?: Partial<EncryptOptions>): Keystore\r\n  {\r\n    const pwd = Buffer.from(password);\r\n    const privKey = Buffer.from(privateKey.replace('0x', ''), 'hex');\r\n    const options = new EncryptOptions(encryptOptions);\r\n    const { salt, iv, kdf, c, n, r, p, dklen, cipher, uuid } = options;\r\n    const kdfParams: Keystore['crypto']['kdfparams'] = {\r\n      dklen: dklen,\r\n      salt: (salt as Buffer).toString('hex')\r\n    };\r\n\r\n    let derivedKey;\r\n    if (kdf === 'pbkdf2') {\r\n      kdfParams.c = c;\r\n      kdfParams.prf = 'hmac-sha256';\r\n      derivedKey = pbkdf2Sync(pwd, salt, c, dklen, 'sha256');\r\n    } else if (kdf === 'scrypt') {\r\n      kdfParams.n = n;\r\n      kdfParams.r = r;\r\n      kdfParams.p = p;\r\n      derivedKey = scryptsy(pwd, salt, n, r, p, dklen);\r\n    } else {\r\n      throw new Error('Unsupported Key Derivation Function' + kdf);\r\n    }\r\n\r\n    const cipherAlg = createCipheriv(cipher, derivedKey.slice(0, 16), iv);\r\n    if (!cipherAlg) { throw new Error('Unsupported cipher ' + cipher)}\r\n    const cipherText = Buffer.concat([cipherAlg.update(privKey), cipherAlg.final()]);\r\n    const toMac = Buffer.concat([derivedKey.slice(16, 32), cipherText]);\r\n    const mac = keccak256(toMac).replace('0x', '');\r\n    return {\r\n      version: 3,\r\n      id: v4({ random: uuid as any }),\r\n      address: this.fromPrivate(privKey).address.toLowerCase().replace('0x', ''),\r\n      crypto: {\r\n        ciphertext: cipherText.toString('hex'),\r\n        cipherparams: {\r\n            iv: iv.toString('hex')\r\n        },\r\n        cipher: options.cipher,\r\n        kdf: kdf,\r\n        kdfparams: kdfParams,\r\n        mac: mac\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt a keystore object\r\n   * @param keystore The keystore object\r\n   * @param password The password to decrypt the keystore with\r\n   * Code from : https://github.com/ethereumjs/ethereumjs-wallet/blob/master/index.js\r\n   */\r\n  public decrypt(keystore: Keystore, password: string): EthAccount {\r\n    if (typeof password !== 'string') { throw new Error('No password provided'); }\r\n    if (typeof keystore !== 'object') { throw new Error('keystore should be an object'); }\r\n    if (keystore.version !== 3) { throw new Error('Not a V3 wallet'); }\r\n\r\n    let derivedKey;\r\n    const { kdf, kdfparams, cipherparams, cipher } = keystore.crypto;\r\n    const pwd = Buffer.from(password, 'utf8');\r\n    const salt = Buffer.from(kdfparams.salt, 'hex');\r\n    const iv = Buffer.from(cipherparams.iv, 'hex');\r\n    // Scrypt encryption\r\n    if (kdf === 'scrypt') {\r\n      const { n, r, p, dklen } = kdfparams;\r\n      derivedKey = scryptsy(pwd, salt, n, r, p, dklen)\r\n    }\r\n    // pbkdf2 encryption\r\n    else if (kdf === 'pbkdf2') {\r\n      if (kdfparams.prf !== 'hmac-sha256') { throw new Error('Unsupported parameters to PBKDF2'); }\r\n      const { c, dklen } = kdfparams;\r\n      derivedKey = pbkdf2Sync(pwd, salt, c, dklen, 'sha256')\r\n    } else {\r\n      throw new Error('Unsupported key derivation scheme')\r\n    }\r\n\r\n    const cipherText = Buffer.from(keystore.crypto.ciphertext, 'hex');\r\n    const mac = keccak256(Buffer.concat([ derivedKey.slice(16, 32), cipherText ]))\r\n                  .replace('0x', '');\r\n\r\n    if (mac !== keystore.crypto.mac) {\r\n      throw new Error('Key derivation failed - possibly wrong password')\r\n    }\r\n\r\n    const decipher = createDecipheriv(cipher, derivedKey.slice(0, 16), iv);\r\n    const seed = Buffer.concat([ decipher.update(cipherText), decipher.final() ]);\r\n\r\n    return this.fromPrivate(seed);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ProvidersModule, MainProvider, Auth } from '@ngeth/provider';\r\nimport { TxObject, toChecksumAddress, checkAddressChecksum } from '@ngeth/utils';\r\n\r\nimport { Accounts, EncryptOptions, Keystore, EthAccount } from './account';\r\nimport { Signer } from './signature/signer';\r\n\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface KeystoreMap {\r\n  [address: string]: Keystore;\r\n}\r\n\r\n@Injectable({ providedIn: ProvidersModule})\r\nexport class Wallet implements Auth {\r\n  private localKeystore = new BehaviorSubject<KeystoreMap>(null);\r\n  private currentAccount = new BehaviorSubject<string>(null);\r\n  public keystores$ = this.localKeystore.asObservable();\r\n  public account$ = this.currentAccount.asObservable();\r\n\r\n  constructor(\r\n    private provider: MainProvider,\r\n    private signer: Signer,\r\n    private accounts: Accounts\r\n  ) {\r\n    this.localKeystore.next(this.getKeystoreMapFromLocalStorage());\r\n  }\r\n\r\n  /** Get the default account */\r\n  get defaultAccount(): string {\r\n    return this.currentAccount.getValue();\r\n  }\r\n\r\n  /** Set the default account */\r\n  set defaultAccount(account: string) {\r\n    this.currentAccount.next(toChecksumAddress(account));\r\n  }\r\n\r\n  /** Return the keystore map from the localstore */\r\n  private getKeystoreMapFromLocalStorage(): KeystoreMap {\r\n    return new Array(localStorage.length).fill(null)\r\n      .reduce((keyMap: KeystoreMap, none: null, i: number) => {\r\n        const key = localStorage.key(i);\r\n        return checkAddressChecksum(key)\r\n          ? {...keyMap, [key]: this.getKeystore(key) }\r\n          : {...keyMap};\r\n      }, {});\r\n  }\r\n\r\n  /**\r\n   * Get a specific keystore depending on its address\r\n   * @param address The address of the keystore\r\n   */\r\n  public getKeystore(address: string): Keystore {\r\n    const checkSum = toChecksumAddress(address);\r\n    return JSON.parse(localStorage.getItem(checkSum));\r\n  }\r\n\r\n  /** Return the list of addresses available in the localStorage */\r\n  public getAccounts(): Observable<string[]> {\r\n    return this.keystores$.pipe(map(keyMap => Object.keys(keyMap)));\r\n  }\r\n\r\n\r\n  /**\r\n   * Create an account\r\n   */\r\n  public create() {\r\n    return this.accounts.create();\r\n  }\r\n\r\n  /**\r\n   * Save an account into the localstorage\r\n   * @param account The key pair account\r\n   * @param password The password to encrypt the account with\r\n   */\r\n  public save(account: EthAccount, password: string) {\r\n    const { address, privateKey } = account;\r\n    const keystore = this.encrypt(privateKey, password);\r\n    // Update allKeystore\r\n    localStorage.setItem(address, JSON.stringify(keystore));\r\n    this.localKeystore.next(this.getKeystoreMapFromLocalStorage());\r\n  }\r\n\r\n  /**\r\n   * Encrypt an private key into a keystore\r\n   * @param privateKey The private key to encrypt\r\n   * @param password The password to encrypt the private key with\r\n   * @param options A list of options to encrypt the private key\r\n   */\r\n  public encrypt(privateKey: string, password: string, options?: Partial<EncryptOptions>) {\r\n    return this.accounts.encrypt(privateKey, password, options);\r\n  }\r\n\r\n  /**\r\n   * Decrypt a keystore object\r\n   * @param keystore The keystore object\r\n   * @param password The password to decrypt the keystore with\r\n   */\r\n  public decrypt(keystore: Keystore, password: string) {\r\n    return this.accounts.decrypt(keystore, password);\r\n  }\r\n\r\n  /*************\r\n   * TRANSACTION\r\n   *************/\r\n\r\n  /**\r\n   * Send a transaction by signing it\r\n   * @param tx The transaction to send\r\n   * @param privateKey The private key to sign the transaction with\r\n   */\r\n  public sendTransaction(tx: TxObject, privateKey: string) {\r\n    const { rawTransaction } = this.signTx(tx, privateKey);\r\n    return this.sendRawTransaction(rawTransaction);\r\n  }\r\n\r\n  /**\r\n   * Send a transaction to the node\r\n   * @param rawTx The signed transaction data.\r\n   */\r\n  public sendRawTransaction(rawTx: string): Observable<string> {\r\n    return this.provider.rpc<string>('eth_sendRawTransaction', [rawTx]);\r\n  }\r\n\r\n  /**\r\n   * Sign a transaction with a private key\r\n   * @param tx The transaction to sign\r\n   * @param privateKey The private key to sign the transaction with\r\n   */\r\n  public signTx(tx: TxObject, privateKey: string) {\r\n    return this.signer.signTx(privateKey, tx, this.provider.id);\r\n  }\r\n\r\n  /***********\r\n   * SIGNATURE\r\n   */\r\n\r\n  /**\r\n   * Sign a message\r\n   * @param message the message to sign\r\n   * @param address the address to sign the message with\r\n   * @param password the password needed to decrypt the private key\r\n   */\r\n  public sign(message: string, address: string, password: string) {\r\n    return this.keystores$.pipe(\r\n      map(keystores => keystores[address]),\r\n      map(keystore => this.decrypt(keystore, password)),\r\n      map(ethAccount => this.signMessage(message, ethAccount.privateKey))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sign a message with the private key\r\n   * @param message The message to sign\r\n   * @param privateKey The private key to sign the message with\r\n   */\r\n  public signMessage(message: string, privateKey: string) {\r\n    const messageHash = this.signer.hashMessage(message);\r\n    const {r, s, v, signature} = this.signer.sign(privateKey, messageHash);\r\n    return {message, messageHash, v, r, s, signature};\r\n  }\r\n\r\n}\r\n"],"names":["Buffer","assert.equal"],"mappings":"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"}
