{"version":3,"file":"ngeth-utils.js.map","sources":["ng://@ngeth/utils/lib/utils/block.ts","ng://@ngeth/utils/lib/utils/bn.ts","ng://@ngeth/utils/lib/utils/keccack.ts","ng://@ngeth/utils/lib/utils/hex.ts","ng://@ngeth/utils/lib/formatters/block.ts","ng://@ngeth/utils/lib/formatters/transaction.ts","ng://@ngeth/utils/lib/formatters/tx-logs.ts","ng://@ngeth/utils/lib/formatters/tx-receipt.ts","ng://@ngeth/utils/lib/formatters/tx-object.ts"],"sourcesContent":["/**\r\n * Returns true if given string is a valid Ethereum block header bloom.\r\n * @method isBloom\r\n * @param hex encoded bloom filter\r\n */\r\nfunction isBloom(bloom: string): boolean {\r\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\r\n    return false;\r\n  } else if (\r\n    /^(0x)?[0-9a-f]{512}$/.test(bloom) ||\r\n    /^(0x)?[0-9A-F]{512}$/.test(bloom)\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns true if given string is a valid log topic.\r\n * @method isTopic\r\n * @param hex encoded topic\r\n */\r\nexport function isTopic(topic: string): boolean {\r\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\r\n    return false;\r\n  } else if (\r\n    /^(0x)?[0-9a-f]{64}$/.test(topic) ||\r\n    /^(0x)?[0-9A-F]{64}$/.test(topic)\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","import BN from 'bn.js';\r\n/**\r\n * Returns true if object is BN, otherwise false\r\n *\r\n * @method isBN\r\n * @param object\r\n */\r\nexport function isBN(object: Object): boolean {\r\n  return (\r\n    object instanceof BN ||\r\n    (object && object.constructor && object.constructor.name === 'BN')\r\n  );\r\n}\r\n\r\n/**\r\n * Returns true if object is BigNumber, otherwise false\r\n *\r\n * @method isBigNumber\r\n * @param object\r\n */\r\nexport function isBigNumber(object: Object): boolean {\r\n  return (\r\n    object && object.constructor && object.constructor.name === 'BigNumber'\r\n  );\r\n}\r\n\r\n/**\r\n * Takes an input and transforms it into an BN\r\n * @param number, string, HEX string or BN\r\n */\r\nexport function toBN(number: number | string | BN): BN {\r\n  try {\r\n    return numberToBN.apply(null, arguments);\r\n  } catch (e) {\r\n    throw new Error(`${e} + ' Given value: ${number} `);\r\n  }\r\n}\r\n\r\n/**\r\n * Takes and input transforms it into BN and if it is negative value, into two's complement\r\n *\r\n * @method toTwosComplement\r\n * @param number\r\n */\r\nexport function toTwosComplement(number: number | string | BN): string {\r\n  return (\r\n    '0x' +\r\n    toBN(number)\r\n      .toTwos(256)\r\n      .toString(16, 64)\r\n  );\r\n}\r\n\r\n/**\r\n * Convert integer or hex integer numbers to BN.js object instances. Does not supprot decimal numbers.\r\n * @param arg\r\n */\r\nfunction numberToBN(arg: string | number | object) {\r\n  if (typeof arg === 'string' || typeof arg === 'number') {\r\n    let multiplier = new BN(1);\r\n    const formattedString = String(arg)\r\n      .toLowerCase()\r\n      .trim();\r\n    const isPrefixed =\r\n      formattedString.substr(0, 2) === '0x' ||\r\n      formattedString.substr(0, 3) === '-0x';\r\n    let stringArg = stripHexPrefix(formattedString);\r\n    if (stringArg.substr(0, 1) === '-') {\r\n      stringArg = stripHexPrefix(stringArg.slice(1));\r\n      multiplier = new BN(-1, 10);\r\n    }\r\n    stringArg = stringArg === '' ? '0' : stringArg;\r\n\r\n    if (\r\n      (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/)) ||\r\n      stringArg.match(/^[a-fA-F]+$/) ||\r\n      (isPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))\r\n    ) {\r\n      return new BN(stringArg, 16).mul(multiplier);\r\n    }\r\n\r\n    if (\r\n      (stringArg.match(/^-?[0-9]+$/) || stringArg === '') &&\r\n      isPrefixed === false\r\n    ) {\r\n      return new BN(stringArg, 10).mul(multiplier);\r\n    }\r\n  } else if (\r\n    typeof arg === 'object' &&\r\n    arg.toString &&\r\n    (!arg['pop'] && !arg['push'])\r\n  ) {\r\n    if (\r\n      arg.toString().match(/^-?[0-9]+$/) &&\r\n      (arg['mul'] || arg['dividedToIntegerBy'])\r\n    ) {\r\n      return new BN(arg.toString(), 10);\r\n    }\r\n  }\r\n\r\n  throw new Error(`\r\n    [number-to-bn] while converting number ${JSON.stringify(\r\n      arg\r\n    )} to BN.js instance,\r\n    error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance.\r\n    Note, decimals are not supported.\r\n  `);\r\n}\r\n\r\n/**\r\n * Removes '0x' from a given `String` if present\r\n * @param str the string value\r\n * @return a string by pass if necessary\r\n */\r\nfunction stripHexPrefix(str?: string): string {\r\n  if (typeof str !== 'string') {\r\n    return str;\r\n  }\r\n\r\n  return isHexPrefixed(str) ? str.slice(2) : str;\r\n}\r\n\r\n/**\r\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\r\n * @param str the string input value\r\n * @return  a boolean if it is or is not hex prefixed\r\n * @throws if the str input is not a string\r\n */\r\nfunction isHexPrefixed(str: string): boolean {\r\n  if (typeof str !== 'string') {\r\n    throw new Error(\r\n      `[is-hex-prefixed] value must be type 'string', is currently type ${typeof str}, while checking isHexPrefixed.`\r\n    );\r\n  }\r\n\r\n  return str.slice(0, 2) === '0x';\r\n}\r\n","/**\r\n * Code from eth-lib/lib/hash\r\n * https://github.com/MaiaVictor/eth-lib/blob/master/lib/hash.js#L11\r\n */\r\n\r\nconst HEX_CHARS = '0123456789abcdef'.split('');\r\nconst KECCAK_PADDING = [1, 256, 65536, 16777216];\r\nconst SHIFT = [0, 8, 16, 24];\r\nconst RC = [\r\n  1,\r\n  0,\r\n  32898,\r\n  0,\r\n  32906,\r\n  2147483648,\r\n  2147516416,\r\n  2147483648,\r\n  32907,\r\n  0,\r\n  2147483649,\r\n  0,\r\n  2147516545,\r\n  2147483648,\r\n  32777,\r\n  2147483648,\r\n  138,\r\n  0,\r\n  136,\r\n  0,\r\n  2147516425,\r\n  0,\r\n  2147483658,\r\n  0,\r\n  2147516555,\r\n  0,\r\n  139,\r\n  2147483648,\r\n  32905,\r\n  2147483648,\r\n  32771,\r\n  2147483648,\r\n  32770,\r\n  2147483648,\r\n  128,\r\n  2147483648,\r\n  32778,\r\n  0,\r\n  2147483658,\r\n  2147483648,\r\n  2147516545,\r\n  2147483648,\r\n  32896,\r\n  2147483648,\r\n  2147483649,\r\n  0,\r\n  2147516424,\r\n  2147483648\r\n];\r\n\r\nconst Keccak = bits => ({\r\n  blocks: [],\r\n  reset: true,\r\n  block: 0,\r\n  start: 0,\r\n  blockCount: (1600 - (bits << 1)) >> 5,\r\n  outputBlocks: bits >> 5,\r\n  s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n});\r\n\r\nconst update = (state, message) => {\r\n  const length = message.length,\r\n    blocks = state.blocks,\r\n    byteCount = state.blockCount << 2,\r\n    blockCount = state.blockCount,\r\n    outputBlocks = state.outputBlocks,\r\n    s = state.s;\r\n  let index = 0,\r\n    i,\r\n    code;\r\n\r\n  // update\r\n  while (index < length) {\r\n    if (state.reset) {\r\n      state.reset = false;\r\n      blocks[0] = state.block;\r\n      for (i = 1; i < blockCount + 1; ++i) {\r\n        blocks[i] = 0;\r\n      }\r\n    }\r\n    if (typeof message !== 'string') {\r\n      for (i = state.start; index < length && i < byteCount; ++index) {\r\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n      }\r\n    } else {\r\n      for (i = state.start; index < length && i < byteCount; ++index) {\r\n        code = message.charCodeAt(index);\r\n        if (code < 0x80) {\r\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n        } else if (code < 0x800) {\r\n          blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n        } else if (code < 0xd800 || code >= 0xe000) {\r\n          blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n          blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n        } else {\r\n          code =\r\n            0x10000 +\r\n            (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n          blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n          blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n          blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n        }\r\n      }\r\n    }\r\n    state.lastByteIndex = i;\r\n    if (i >= byteCount) {\r\n      state.start = i - byteCount;\r\n      state.block = blocks[blockCount];\r\n      for (i = 0; i < blockCount; ++i) {\r\n        s[i] ^= blocks[i];\r\n      }\r\n      f(s);\r\n      state.reset = true;\r\n    } else {\r\n      state.start = i;\r\n    }\r\n  }\r\n\r\n  // finalize\r\n  i = state.lastByteIndex;\r\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\r\n  if (state.lastByteIndex === byteCount) {\r\n    blocks[0] = blocks[blockCount];\r\n    for (i = 1; i < blockCount + 1; ++i) {\r\n      blocks[i] = 0;\r\n    }\r\n  }\r\n  blocks[blockCount - 1] |= 0x80000000;\r\n  for (i = 0; i < blockCount; ++i) {\r\n    s[i] ^= blocks[i];\r\n  }\r\n  f(s);\r\n\r\n  // toString\r\n  let hex = '',\r\n    j = 0,\r\n    block;\r\n  while (j < outputBlocks) {\r\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n      block = s[i];\r\n      hex +=\r\n        HEX_CHARS[(block >> 4) & 0x0f] +\r\n        HEX_CHARS[block & 0x0f] +\r\n        HEX_CHARS[(block >> 12) & 0x0f] +\r\n        HEX_CHARS[(block >> 8) & 0x0f] +\r\n        HEX_CHARS[(block >> 20) & 0x0f] +\r\n        HEX_CHARS[(block >> 16) & 0x0f] +\r\n        HEX_CHARS[(block >> 28) & 0x0f] +\r\n        HEX_CHARS[(block >> 24) & 0x0f];\r\n    }\r\n    if (j % blockCount === 0) {\r\n      f(s);\r\n      i = 0;\r\n    }\r\n  }\r\n  return '0x' + hex;\r\n};\r\n\r\nconst f = s => {\r\n  let h,\r\n    l,\r\n    n,\r\n    c0,\r\n    c1,\r\n    c2,\r\n    c3,\r\n    c4,\r\n    c5,\r\n    c6,\r\n    c7,\r\n    c8,\r\n    c9,\r\n    b0,\r\n    b1,\r\n    b2,\r\n    b3,\r\n    b4,\r\n    b5,\r\n    b6,\r\n    b7,\r\n    b8,\r\n    b9,\r\n    b10,\r\n    b11,\r\n    b12,\r\n    b13,\r\n    b14,\r\n    b15,\r\n    b16,\r\n    b17,\r\n    b18,\r\n    b19,\r\n    b20,\r\n    b21,\r\n    b22,\r\n    b23,\r\n    b24,\r\n    b25,\r\n    b26,\r\n    b27,\r\n    b28,\r\n    b29,\r\n    b30,\r\n    b31,\r\n    b32,\r\n    b33,\r\n    b34,\r\n    b35,\r\n    b36,\r\n    b37,\r\n    b38,\r\n    b39,\r\n    b40,\r\n    b41,\r\n    b42,\r\n    b43,\r\n    b44,\r\n    b45,\r\n    b46,\r\n    b47,\r\n    b48,\r\n    b49;\r\n\r\n  for (n = 0; n < 48; n += 2) {\r\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\r\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\r\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\r\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\r\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\r\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\r\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\r\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\r\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\r\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\r\n\r\n    h = c8 ^ ((c2 << 1) | (c3 >>> 31));\r\n    l = c9 ^ ((c3 << 1) | (c2 >>> 31));\r\n    s[0] ^= h;\r\n    s[1] ^= l;\r\n    s[10] ^= h;\r\n    s[11] ^= l;\r\n    s[20] ^= h;\r\n    s[21] ^= l;\r\n    s[30] ^= h;\r\n    s[31] ^= l;\r\n    s[40] ^= h;\r\n    s[41] ^= l;\r\n    h = c0 ^ ((c4 << 1) | (c5 >>> 31));\r\n    l = c1 ^ ((c5 << 1) | (c4 >>> 31));\r\n    s[2] ^= h;\r\n    s[3] ^= l;\r\n    s[12] ^= h;\r\n    s[13] ^= l;\r\n    s[22] ^= h;\r\n    s[23] ^= l;\r\n    s[32] ^= h;\r\n    s[33] ^= l;\r\n    s[42] ^= h;\r\n    s[43] ^= l;\r\n    h = c2 ^ ((c6 << 1) | (c7 >>> 31));\r\n    l = c3 ^ ((c7 << 1) | (c6 >>> 31));\r\n    s[4] ^= h;\r\n    s[5] ^= l;\r\n    s[14] ^= h;\r\n    s[15] ^= l;\r\n    s[24] ^= h;\r\n    s[25] ^= l;\r\n    s[34] ^= h;\r\n    s[35] ^= l;\r\n    s[44] ^= h;\r\n    s[45] ^= l;\r\n    h = c4 ^ ((c8 << 1) | (c9 >>> 31));\r\n    l = c5 ^ ((c9 << 1) | (c8 >>> 31));\r\n    s[6] ^= h;\r\n    s[7] ^= l;\r\n    s[16] ^= h;\r\n    s[17] ^= l;\r\n    s[26] ^= h;\r\n    s[27] ^= l;\r\n    s[36] ^= h;\r\n    s[37] ^= l;\r\n    s[46] ^= h;\r\n    s[47] ^= l;\r\n    h = c6 ^ ((c0 << 1) | (c1 >>> 31));\r\n    l = c7 ^ ((c1 << 1) | (c0 >>> 31));\r\n    s[8] ^= h;\r\n    s[9] ^= l;\r\n    s[18] ^= h;\r\n    s[19] ^= l;\r\n    s[28] ^= h;\r\n    s[29] ^= l;\r\n    s[38] ^= h;\r\n    s[39] ^= l;\r\n    s[48] ^= h;\r\n    s[49] ^= l;\r\n\r\n    b0 = s[0];\r\n    b1 = s[1];\r\n    b32 = (s[11] << 4) | (s[10] >>> 28);\r\n    b33 = (s[10] << 4) | (s[11] >>> 28);\r\n    b14 = (s[20] << 3) | (s[21] >>> 29);\r\n    b15 = (s[21] << 3) | (s[20] >>> 29);\r\n    b46 = (s[31] << 9) | (s[30] >>> 23);\r\n    b47 = (s[30] << 9) | (s[31] >>> 23);\r\n    b28 = (s[40] << 18) | (s[41] >>> 14);\r\n    b29 = (s[41] << 18) | (s[40] >>> 14);\r\n    b20 = (s[2] << 1) | (s[3] >>> 31);\r\n    b21 = (s[3] << 1) | (s[2] >>> 31);\r\n    b2 = (s[13] << 12) | (s[12] >>> 20);\r\n    b3 = (s[12] << 12) | (s[13] >>> 20);\r\n    b34 = (s[22] << 10) | (s[23] >>> 22);\r\n    b35 = (s[23] << 10) | (s[22] >>> 22);\r\n    b16 = (s[33] << 13) | (s[32] >>> 19);\r\n    b17 = (s[32] << 13) | (s[33] >>> 19);\r\n    b48 = (s[42] << 2) | (s[43] >>> 30);\r\n    b49 = (s[43] << 2) | (s[42] >>> 30);\r\n    b40 = (s[5] << 30) | (s[4] >>> 2);\r\n    b41 = (s[4] << 30) | (s[5] >>> 2);\r\n    b22 = (s[14] << 6) | (s[15] >>> 26);\r\n    b23 = (s[15] << 6) | (s[14] >>> 26);\r\n    b4 = (s[25] << 11) | (s[24] >>> 21);\r\n    b5 = (s[24] << 11) | (s[25] >>> 21);\r\n    b36 = (s[34] << 15) | (s[35] >>> 17);\r\n    b37 = (s[35] << 15) | (s[34] >>> 17);\r\n    b18 = (s[45] << 29) | (s[44] >>> 3);\r\n    b19 = (s[44] << 29) | (s[45] >>> 3);\r\n    b10 = (s[6] << 28) | (s[7] >>> 4);\r\n    b11 = (s[7] << 28) | (s[6] >>> 4);\r\n    b42 = (s[17] << 23) | (s[16] >>> 9);\r\n    b43 = (s[16] << 23) | (s[17] >>> 9);\r\n    b24 = (s[26] << 25) | (s[27] >>> 7);\r\n    b25 = (s[27] << 25) | (s[26] >>> 7);\r\n    b6 = (s[36] << 21) | (s[37] >>> 11);\r\n    b7 = (s[37] << 21) | (s[36] >>> 11);\r\n    b38 = (s[47] << 24) | (s[46] >>> 8);\r\n    b39 = (s[46] << 24) | (s[47] >>> 8);\r\n    b30 = (s[8] << 27) | (s[9] >>> 5);\r\n    b31 = (s[9] << 27) | (s[8] >>> 5);\r\n    b12 = (s[18] << 20) | (s[19] >>> 12);\r\n    b13 = (s[19] << 20) | (s[18] >>> 12);\r\n    b44 = (s[29] << 7) | (s[28] >>> 25);\r\n    b45 = (s[28] << 7) | (s[29] >>> 25);\r\n    b26 = (s[38] << 8) | (s[39] >>> 24);\r\n    b27 = (s[39] << 8) | (s[38] >>> 24);\r\n    b8 = (s[48] << 14) | (s[49] >>> 18);\r\n    b9 = (s[49] << 14) | (s[48] >>> 18);\r\n\r\n    s[0] = b0 ^ (~b2 & b4);\r\n    s[1] = b1 ^ (~b3 & b5);\r\n    s[10] = b10 ^ (~b12 & b14);\r\n    s[11] = b11 ^ (~b13 & b15);\r\n    s[20] = b20 ^ (~b22 & b24);\r\n    s[21] = b21 ^ (~b23 & b25);\r\n    s[30] = b30 ^ (~b32 & b34);\r\n    s[31] = b31 ^ (~b33 & b35);\r\n    s[40] = b40 ^ (~b42 & b44);\r\n    s[41] = b41 ^ (~b43 & b45);\r\n    s[2] = b2 ^ (~b4 & b6);\r\n    s[3] = b3 ^ (~b5 & b7);\r\n    s[12] = b12 ^ (~b14 & b16);\r\n    s[13] = b13 ^ (~b15 & b17);\r\n    s[22] = b22 ^ (~b24 & b26);\r\n    s[23] = b23 ^ (~b25 & b27);\r\n    s[32] = b32 ^ (~b34 & b36);\r\n    s[33] = b33 ^ (~b35 & b37);\r\n    s[42] = b42 ^ (~b44 & b46);\r\n    s[43] = b43 ^ (~b45 & b47);\r\n    s[4] = b4 ^ (~b6 & b8);\r\n    s[5] = b5 ^ (~b7 & b9);\r\n    s[14] = b14 ^ (~b16 & b18);\r\n    s[15] = b15 ^ (~b17 & b19);\r\n    s[24] = b24 ^ (~b26 & b28);\r\n    s[25] = b25 ^ (~b27 & b29);\r\n    s[34] = b34 ^ (~b36 & b38);\r\n    s[35] = b35 ^ (~b37 & b39);\r\n    s[44] = b44 ^ (~b46 & b48);\r\n    s[45] = b45 ^ (~b47 & b49);\r\n    s[6] = b6 ^ (~b8 & b0);\r\n    s[7] = b7 ^ (~b9 & b1);\r\n    s[16] = b16 ^ (~b18 & b10);\r\n    s[17] = b17 ^ (~b19 & b11);\r\n    s[26] = b26 ^ (~b28 & b20);\r\n    s[27] = b27 ^ (~b29 & b21);\r\n    s[36] = b36 ^ (~b38 & b30);\r\n    s[37] = b37 ^ (~b39 & b31);\r\n    s[46] = b46 ^ (~b48 & b40);\r\n    s[47] = b47 ^ (~b49 & b41);\r\n    s[8] = b8 ^ (~b0 & b2);\r\n    s[9] = b9 ^ (~b1 & b3);\r\n    s[18] = b18 ^ (~b10 & b12);\r\n    s[19] = b19 ^ (~b11 & b13);\r\n    s[28] = b28 ^ (~b20 & b22);\r\n    s[29] = b29 ^ (~b21 & b23);\r\n    s[38] = b38 ^ (~b30 & b32);\r\n    s[39] = b39 ^ (~b31 & b33);\r\n    s[48] = b48 ^ (~b40 & b42);\r\n    s[49] = b49 ^ (~b41 & b43);\r\n\r\n    s[0] ^= RC[n];\r\n    s[1] ^= RC[n + 1];\r\n  }\r\n};\r\n\r\nconst keccak = (bits: number) => {\r\n  /**\r\n   * If str is a string it must have '0x'\r\n   */\r\n  return (str: string | Buffer) => {\r\n    let msg;\r\n    if (typeof str === 'string' && str.slice(0, 2) === '0x') {\r\n      msg = [];\r\n      for (let i = 2, l = str.length; i < l; i += 2) {\r\n        msg.push(parseInt(str.slice(i, i + 2), 16));\r\n      }\r\n    } else {\r\n      msg = str;\r\n    }\r\n    return update(Keccak(bits), msg);\r\n  };\r\n};\r\n\r\nexport const keccak256 = keccak(256);\r\n","import * as utf8 from 'utf8';\r\nimport BN from 'bn.js';\r\n\r\nimport { isBigNumber, isBN, toBN } from './bn';\r\nimport { keccak256 } from './keccack';\r\n\r\n/*******************\r\n * ADDRESS\r\n */\r\n\r\n/**\r\n * Checks if the given string is an address\r\n * @method isAddress\r\n * @param address the given HEX address\r\n */\r\nexport function isAddress(address: string): boolean {\r\n  // check if it has the basic requirements of an address\r\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n    return false;\r\n    // If it's ALL lowercase or ALL upppercase\r\n  } else if (\r\n    /^(0x|0X)?[0-9a-f]{40}$/.test(address) ||\r\n    /^(0x|0X)?[0-9A-F]{40}$/.test(address)\r\n  ) {\r\n    return true;\r\n    // Otherwise check each case\r\n  } else {\r\n    return checkAddressChecksum(address);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given string is a checksummed address\r\n *\r\n * @method checkAddressChecksum\r\n * @param address the given HEX address\r\n */\r\nexport function checkAddressChecksum(address: string): boolean {\r\n  // Check each case\r\n  address = address.replace(/^0x/i, '');\r\n  const addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\r\n\r\n  for (let i = 0; i < 40; i++) {\r\n    // the nth letter should be uppercase if the nth digit of casemap is 1\r\n    if (\r\n      (parseInt(addressHash[i], 16) > 7 &&\r\n        address[i].toUpperCase() !== address[i]) ||\r\n      (parseInt(addressHash[i], 16) <= 7 &&\r\n        address[i].toLowerCase() !== address[i])\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Converts to a checksum address\r\n *\r\n * @method toChecksumAddress\r\n * @param address the given HEX address\r\n */\r\nexport function toChecksumAddress(address: string): string {\r\n  if (typeof address === 'undefined') {\r\n    return '';\r\n  }\r\n\r\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n    throw new Error(\r\n      `Given address ${address} is not a valid Ethereum address.`\r\n    );\r\n  }\r\n\r\n  address = address.toLowerCase().replace(/^0x/i, '');\r\n  const addressHash = sha3(address).replace(/^0x/i, '');\r\n  let checksumAddress = '0x';\r\n\r\n  for (let i = 0; i < address.length; i++) {\r\n    // If ith character is 9 to f then make it uppercase\r\n    if (parseInt(addressHash[i], 16) > 7) {\r\n      checksumAddress += address[i].toUpperCase();\r\n    } else {\r\n      checksumAddress += address[i];\r\n    }\r\n  }\r\n  return checksumAddress;\r\n}\r\n\r\n/**\r\n * Should be called to pad string to expected length\r\n *\r\n * @method leftPad\r\n * @param string to be padded\r\n * @param chars that result string should have\r\n * @param sign, by default 0\r\n * @returns right aligned string\r\n */\r\nexport function leftPad(string: string, chars: number, sign: string): string {\r\n  const hasPrefix = /^0x/i.test(string) || typeof string === 'number';\r\n  string = (string as any).toString(16).replace(/^0x/i, '');\r\n\r\n  const padding =\r\n    chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\r\n\r\n  return (\r\n    (hasPrefix ? '0x' : '') +\r\n    new Array(padding).join(sign ? sign : '0') +\r\n    string\r\n  );\r\n}\r\n\r\n/**\r\n * Should be called to pad string to expected length\r\n *\r\n * @method rightPad\r\n * @param string to be padded\r\n * @param chars that result string should have\r\n * @param sign, by default 0\r\n * @returns right aligned string\r\n */\r\nexport function rightPad(string: string, chars: number, sign: string): string {\r\n  const hasPrefix = /^0x/i.test(string) || typeof string === 'number';\r\n  string = (string as any).toString(16).replace(/^0x/i, '');\r\n\r\n  const padding =\r\n    chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\r\n\r\n  return (\r\n    (hasPrefix ? '0x' : '') +\r\n    string +\r\n    new Array(padding).join(sign ? sign : '0')\r\n  );\r\n}\r\n\r\n/********************************\r\n * SHA3\r\n */\r\n\r\nconst SHA3_NULL_S =\r\n  '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\r\n\r\n/**\r\n * Hashes values to a sha3 hash using keccak 256\r\n * To hash a HEX string the hex must have 0x in front.\r\n * @method sha3\r\n * @return the sha3 string\r\n */\r\nexport function sha3(value: string) {\r\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\r\n    value = hexToBytes(value) as string;\r\n  }\r\n\r\n  const returnValue = keccak256(value);\r\n\r\n  if (returnValue === SHA3_NULL_S) {\r\n    return null;\r\n  } else {\r\n    return returnValue;\r\n  }\r\n}\r\n\r\n/************************************\r\n * HEX\r\n */\r\n\r\n/**\r\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\r\n *\r\n * @method utf8ToHex\r\n * @param str\r\n * @returns hex representation of input string\r\n */\r\nexport function utf8ToHex(str: string): string {\r\n  str = utf8.encode(str);\r\n  let hex = '';\r\n\r\n  // remove \\u0000 padding from either side\r\n  str = str.replace(/^(?:\\u0000)*/, '');\r\n  str = str\r\n    .split('')\r\n    .reverse()\r\n    .join('');\r\n  str = str.replace(/^(?:\\u0000)*/, '');\r\n  str = str\r\n    .split('')\r\n    .reverse()\r\n    .join('');\r\n\r\n  for (let i = 0; i < str.length; i++) {\r\n    const code = str.charCodeAt(i);\r\n    // if (code !== 0) {\r\n    const n = code.toString(16);\r\n    hex += n.length < 2 ? '0' + n : n;\r\n    // }\r\n  }\r\n\r\n  return '0x' + hex;\r\n}\r\n\r\n/**\r\n * Should be called to get utf8 from it's hex representation\r\n * @method hexToUtf8\r\n * @param hex\r\n */\r\nexport function hexToUtf8(hex: string): string {\r\n  if (!isHexStrict(hex)) {\r\n    throw new Error(`The parameter ${hex} must be a valid HEX string.`);\r\n  }\r\n  let str = '';\r\n  let code = 0;\r\n  hex = hex.replace(/^0x/i, '');\r\n\r\n  // remove 00 padding from either side\r\n  hex = hex.replace(/^(?:00)*/, '');\r\n  hex = hex\r\n    .split('')\r\n    .reverse()\r\n    .join('');\r\n  hex = hex.replace(/^(?:00)*/, '');\r\n  hex = hex\r\n    .split('')\r\n    .reverse()\r\n    .join('');\r\n\r\n  const l = hex.length;\r\n\r\n  for (let i = 0; i < l; i += 2) {\r\n    code = parseInt(hex.substr(i, 2), 16);\r\n    // if (code !== 0) {\r\n    str += String.fromCharCode(code);\r\n    // }\r\n  }\r\n\r\n  return utf8.decode(str);\r\n}\r\n\r\n/**\r\n * Converts value to it's number representation\r\n * @method hexToNumber\r\n * @param value\r\n */\r\nexport function hexToNumber(value: string | number | BN): number {\r\n  if (!value) {\r\n    return value;\r\n  }\r\n\r\n  return new BN(value, 16).toNumber();\r\n}\r\n\r\n/**\r\n * Converts value to it's decimal representation in string\r\n * @method hexToNumberString\r\n * @param value\r\n */\r\nexport function hexToNumberString(value: string | number | BN): string {\r\n  if (!value) {\r\n    return value;\r\n  }\r\n\r\n  return new BN(value, 16).toString(10);\r\n}\r\n\r\n/**\r\n * Converts value to it's hex representation\r\n * @method numberToHex\r\n * @param value\r\n */\r\nexport function numberToHex(value: String | Number | BN): string {\r\n  if (typeof value === 'undefined' || value === 'null') {\r\n    return value;\r\n  }\r\n\r\n  if (!isFinite(value) && !isHexStrict(value)) {\r\n    throw new Error(`Given input ${value} is not a number.`);\r\n  }\r\n\r\n  const number = toBN(value);\r\n  const result = number.toString(16);\r\n\r\n  return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\r\n}\r\n\r\n/**\r\n * Convert a byte array to a hex string\r\n * Note: Implementation from crypto-js\r\n * @method bytesToHex\r\n * @param bytes\r\n * @return the hex string\r\n */\r\nexport function bytesToHex(bytes: number[]): string {\r\n  const hex = [];\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    /* tslint:disable */\r\n    hex.push((bytes[i] >>> 4).toString(16));\r\n    hex.push((bytes[i] & 0xf).toString(16));\r\n    /* tslint:enable  */\r\n  }\r\n  return '0x' + hex.join('');\r\n}\r\n\r\n/**\r\n * Convert a hex string to a byte array\r\n * Note: Implementation from crypto-js\r\n * @method hexToBytes\r\n * @param hex\r\n * @return the byte array\r\n */\r\nexport function hexToBytes(hex: string): number[] | string {\r\n  hex = (hex as any).toString(16);\r\n\r\n  if (!isHexStrict(hex)) {\r\n    throw new Error(`Given value ${hex} is not a valid hex string.`);\r\n  }\r\n\r\n  hex = hex.replace(/^0x/i, '');\r\n  const bytes = [];\r\n  for (let c = 0; c < hex.length; c += 2) {\r\n    bytes.push(parseInt(hex.substr(c, 2), 16));\r\n  }\r\n  return bytes;\r\n}\r\n\r\n/**\r\n * Should be called to get ascii from it's hex representation\r\n *\r\n * @method hexToAscii\r\n * @param hex\r\n * @returns ascii string representation of hex value\r\n */\r\nexport function hexToAscii(hex: string): string {\r\n  if (!isHexStrict(hex)) {\r\n    throw new Error('The parameter must be a valid HEX string.');\r\n  }\r\n\r\n  let str = '';\r\n  let i = 0;\r\n  const l = hex.length;\r\n  if (hex.substring(0, 2) === '0x') {\r\n    i = 2;\r\n  }\r\n  for (; i < l; i += 2) {\r\n    const code = parseInt(hex.substr(i, 2), 16);\r\n    str += String.fromCharCode(code);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n/**\r\n * Should be called to get hex representation (prefixed by 0x) of ascii string\r\n *\r\n * @method asciiToHex\r\n * @param str\r\n * @returns hex representation of input string\r\n */\r\nexport function asciiToHex(str: string): string {\r\n  if (!str) {\r\n    return '0x00';\r\n  }\r\n  let hex = '';\r\n  for (let i = 0; i < str.length; i++) {\r\n    const code = str.charCodeAt(i);\r\n    const n = code.toString(16);\r\n    hex += n.length < 2 ? '0' + n : n;\r\n  }\r\n\r\n  return '0x' + hex;\r\n}\r\n\r\n/**\r\n * Auto converts any given value into it's hex representation.\r\n *\r\n * And even stringifys objects before.\r\n *\r\n * @method toHex\r\n * @param value\r\n * @param returnType\r\n */\r\nexport function toHex(\r\n  value: String | Number | BN | Object,\r\n  returnType?: boolean\r\n): string {\r\n  /*jshint maxcomplexity: false */\r\n\r\n  if (isAddress(value)) {\r\n    return returnType\r\n      ? 'address'\r\n      : '0x' + value.toLowerCase().replace(/^0x/i, '');\r\n  }\r\n\r\n  if (typeof value === 'boolean') {\r\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\r\n  }\r\n\r\n  if (typeof value === 'object' && !isBigNumber(value) && !isBN(value)) {\r\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\r\n  }\r\n\r\n  // if its a negative number, pass it through numberToHex\r\n  if (typeof value === 'string') {\r\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\r\n      return returnType ? 'int256' : numberToHex(value);\r\n    } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\r\n      return returnType ? 'bytes' : value;\r\n    } else if (!isFinite(value as any)) {\r\n      return returnType ? 'string' : utf8ToHex(value);\r\n    }\r\n  }\r\n\r\n  return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\r\n}\r\n\r\n/**\r\n * Check if string is HEX, requires a 0x in front\r\n *\r\n * @method isHexStrict\r\n * @param hex to be checked\r\n */\r\nexport function isHexStrict(hex: string): boolean {\r\n  return (\r\n    typeof hex === 'string' ||\r\n    (typeof hex === 'number' && /^(-)?0x[0-9a-f]*$/i.test(hex))\r\n  );\r\n}\r\n\r\n/**\r\n * Check if string is HEX\r\n *\r\n * @method isHex\r\n * @param hex to be checked\r\n */\r\nexport function isHex(hex: string): boolean {\r\n  return (\r\n    typeof hex === 'string' ||\r\n    (typeof hex === 'number' && /^(-0x|0x)?[0-9a-f]*$/i.test(hex))\r\n  );\r\n}\r\n","import { hexToNumber } from '../utils';\r\n\r\nexport interface IBlock {\r\n  /** the block number. null when its pending block. */\r\n  number: number;\r\n  /** hash of the block. null when its pending block. */\r\n  hash: string;\r\n  /** hash of the parent block. */\r\n  parentHash: string;\r\n  /** hash of the generated proof-of-work. null when its pending block. */\r\n  nonce: string;\r\n  /** SHA3 of the uncles data in the block. */\r\n  sha3Uncles: string;\r\n  /** the bloom filter for the logs of the block. null when its pending block. */\r\n  logsBloom: string;\r\n  /** the root of the transaction trie of the block. */\r\n  transactionsRoot: string;\r\n  /** the root of the final state trie of the block. */\r\n  stateRoot: string;\r\n  /** the root of the receipts trie of the block. */\r\n  receiptsRoot: string;\r\n  /** the address of the beneficiary to whom the mining rewards were given. */\r\n  miner: string;\r\n  /** integer of the difficulty for this block. */\r\n  difficulty: number;\r\n  /**  integer of the total difficulty of the chain until this block. */\r\n  totalDifficulty: number;\r\n  /** integer the size of this block in bytes. */\r\n  size: number;\r\n  /** the \"extra data\" field of this block. */\r\n  extraData: string;\r\n  /** the maximum gas allowed in this block. */\r\n  gasLimit: number;\r\n  /** the total used gas by all transactions in this block. */\r\n  gasUsed: number;\r\n  /** the unix timestamp for when the block was collated. */\r\n  timestamp: number;\r\n  /** Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. */\r\n  transactions: string[];\r\n  /** Array of uncle hashes. */\r\n  uncles: string[];\r\n}\r\n\r\nexport class Block implements IBlock {\r\n  number: number;\r\n  hash: string;\r\n  parentHash: string;\r\n  nonce: string;\r\n  sha3Uncles: string;\r\n  logsBloom: string;\r\n  transactionsRoot: string;\r\n  stateRoot: string;\r\n  receiptsRoot: string;\r\n  miner: string;\r\n  difficulty: number;\r\n  totalDifficulty: number;\r\n  size: number;\r\n  extraData: string;\r\n  gasLimit: number;\r\n  gasUsed: number;\r\n  timestamp: number;\r\n  transactions: string[];\r\n  uncles: string[];\r\n\r\n  constructor(ethBlock) {\r\n    this.number = hexToNumber(ethBlock.number);\r\n    this.hash = ethBlock.hash;\r\n    this.parentHash = ethBlock.parentHash;\r\n    this.nonce = ethBlock.nonce;\r\n    this.sha3Uncles = ethBlock.sha3Uncles;\r\n    this.logsBloom = ethBlock.logsBloom;\r\n    this.transactionsRoot = ethBlock.transactionsRoot;\r\n    this.stateRoot = ethBlock.stateRoot;\r\n    this.receiptsRoot = ethBlock.receiptsRoot;\r\n    this.miner = ethBlock.miner;\r\n    this.difficulty = hexToNumber(ethBlock.difficulty);\r\n    this.totalDifficulty = hexToNumber(ethBlock.totalDifficulty);\r\n    this.size = hexToNumber(ethBlock.size);\r\n    this.extraData = ethBlock.extraData;\r\n    this.gasLimit = hexToNumber(ethBlock.gasLimit);\r\n    this.gasUsed = hexToNumber(ethBlock.gasUsed);\r\n    this.timestamp = hexToNumber(ethBlock.timestamp);\r\n    this.transactions = ethBlock.transactions;\r\n    this.uncles = ethBlock.uncles;\r\n  }\r\n}\r\n","import { hexToNumber, toBN } from '../utils';\r\n\r\nexport interface ITransaction {\r\n  /** hash of the transaction. */\r\n  hash: string;\r\n  /** The number of transactions made by the sender prior to this one. */\r\n  nonce: number;\r\n  /** Hash of the block where this transaction was in. null when its pending. */\r\n  blockHash: string;\r\n  /** Block number where this transaction was in. null when its pending. */\r\n  blockNumber: number;\r\n  /** Integer of the transactions index position in the block. null when its pending. */\r\n  transactionIndex: number;\r\n  /** Address of the sender. */\r\n  from: string;\r\n  /** Address of the receiver. null when its a contract creation transaction. */\r\n  to: string;\r\n  /** BigNumber::value transferred in Wei  */\r\n  value: string;\r\n  /** Gas provided by the sender. */\r\n  gas: number;\r\n  /** Gas price provided by the sender in Wei. */\r\n  gasPrice: number;\r\n  /** The data send along with the transaction. */\r\n  input: string;\r\n}\r\n\r\nexport class Transaction implements ITransaction {\r\n  hash: string;\r\n  nonce: number;\r\n  blockHash: string;\r\n  blockNumber: number;\r\n  transactionIndex: number;\r\n  from: string;\r\n  to: string;\r\n  value: string;\r\n  gas: number;\r\n  gasPrice: number;\r\n  input: string;\r\n\r\n  constructor(ethTx) {\r\n    this.hash = ethTx.hash;\r\n    this.nonce = hexToNumber(ethTx.nonce);\r\n    this.blockHash = ethTx.blockHash;\r\n    this.blockNumber = hexToNumber(ethTx.blockNumber);\r\n    this.transactionIndex = hexToNumber(ethTx.transactionIndex);\r\n    this.from = ethTx.from;\r\n    this.to = ethTx.to;\r\n    this.value = toBN(ethTx.value).toString(10);\r\n    this.gas = hexToNumber(ethTx.gas);\r\n    this.gasPrice = hexToNumber(ethTx.gasPrice);\r\n    this.input = ethTx.input;\r\n  }\r\n}\r\n","import { hexToNumber } from '../utils';\r\n\r\nexport interface ITxLogs {\r\n  /**  contains one or more 32 Bytes non-indexed arguments of the log. */\r\n  data: string;\r\n  /** Array of 0 to 4 32-Bytes of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event */\r\n  topics: string[];\r\n  /** integer of the log index position in the block. null when its pending log. */\r\n  logIndex: number;\r\n  /** integer of the transactions index position log was created from. null when its pending log. */\r\n  transactionIndex: number;\r\n  /** hash of the transactions this log was created from. null when its pending log. */\r\n  transactionHash: string;\r\n  /** hash of the block where this log was in. null when its pending. null when its pending log. */\r\n  blockHash: string;\r\n  /** the block number where this log was in. null when its pending. null when its pending log. */\r\n  blockNumber: number;\r\n  /** address from which this log originated. */\r\n  address: string;\r\n}\r\n\r\nexport class TxLogs {\r\n  data: string;\r\n  topics: string[];\r\n  logIndex: number;\r\n  transactionIndex: number;\r\n  transactionHash: string;\r\n  blockHash: string;\r\n  blockNumber: number;\r\n  address: string;\r\n\r\n  constructor(ethTxLogs) {\r\n    this.data = ethTxLogs.data;\r\n    this.topics = ethTxLogs.topics;\r\n    this.logIndex = hexToNumber(ethTxLogs.logIndex);\r\n    this.transactionIndex = hexToNumber(ethTxLogs.transactionIndex);\r\n    this.transactionHash = ethTxLogs.transactionHash;\r\n    this.blockHash = ethTxLogs.blockHash;\r\n    this.blockNumber = hexToNumber(ethTxLogs.blockNumber);\r\n    this.address = ethTxLogs.address;\r\n  }\r\n}\r\n","import { ITxLogs, TxLogs } from './tx-logs';\r\nimport { hexToNumber } from '../utils';\r\n\r\nexport interface ITxReceipt {\r\n  /** 32 bytes of post-transaction stateroot (pre Byzantium)  */\r\n  root?: string;\r\n  /** success or failure */\r\n  status?: boolean;\r\n  /**  hash of the transaction */\r\n  transactionHash: string;\r\n  /** integer of the transactions index position in the block. */\r\n  transactionIndex: number;\r\n  /** hash of the block where this transaction was in. */\r\n  blockHash: string;\r\n  /** block number where this transaction was in. */\r\n  blockNumber: number;\r\n  /** The contract address created, if the transaction was a contract creation, otherwise null. */\r\n  contractAddress: string;\r\n  /** The total amount of gas used when this transaction was executed in the block. */\r\n  cumulativeGasUsed: number;\r\n  /** The amount of gas used by this specific transaction alone. */\r\n  gasUsed: number;\r\n  /** Array of log objects, which this transaction generated. */\r\n  logs: ITxLogs[];\r\n  /**  Bloom filter for light clients to quickly retrieve related logs. */\r\n  logsBloom: string;\r\n}\r\n\r\nexport class TxReceipt {\r\n  root?: string;\r\n  status?: boolean;\r\n  transactionHash: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  blockNumber: number;\r\n  contractAddress: string;\r\n  cumulativeGasUsed: number;\r\n  gasUsed: number;\r\n  logs: ITxLogs[];\r\n  logsBloom: string;\r\n\r\n  constructor(ethTxReceipt) {\r\n    if (ethTxReceipt.status) {\r\n      this.status = hexToNumber(ethTxReceipt.status) === 1 ? true : false;\r\n    } else {\r\n      this.root = ethTxReceipt.root;\r\n    }\r\n    this.transactionHash = ethTxReceipt.transactionHash;\r\n    this.transactionIndex = hexToNumber(ethTxReceipt.transactionIndex);\r\n    this.blockHash = ethTxReceipt.blockHash;\r\n    this.blockNumber = hexToNumber(ethTxReceipt.blockNumber);\r\n    this.contractAddress = ethTxReceipt.contractAddress;\r\n    this.cumulativeGasUsed = hexToNumber(ethTxReceipt.cumulativeGasUsed);\r\n    this.gasUsed = hexToNumber(ethTxReceipt.gasUsed);\r\n    this.logs = ethTxReceipt.logs.map(log => new TxLogs(log));\r\n    this.logsBloom = ethTxReceipt.logsBloom;\r\n  }\r\n}\r\n","import { BN } from 'bn.js';\r\n\r\nexport interface ITxObject {\r\n    /** The address the transaction is send from. */\r\n    from: string;\r\n    /** The address the transaction is directed to. */\r\n    to: string;\r\n    /** (default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. */\r\n    gas: number;\r\n    /** Integer of the gasPrice used for each paid gas */\r\n    gasPrice: string;\r\n    /** Integer of the value sent with if (tx transaction */\r\n    value: string;\r\n    /** The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. */\r\n    data: string;\r\n    /** Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. */\r\n    nonce: number;\r\n}\r\n\r\nexport class TxObject {\r\n  /** The address the transaction is send from. */\r\n  public from: string;\r\n  /** The address the transaction is directed to. */\r\n  public to: string;\r\n  /** (default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas. */\r\n  public gas: string;\r\n  /** Integer of the gasPrice used for each paid gas */\r\n  public gasPrice: string;\r\n  /** Integer of the value sent with if (tx transaction */\r\n  public value: string;\r\n  /** The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. */\r\n  public data: string;\r\n  /** Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. */\r\n  public nonce: string;\r\n\r\n  constructor(tx: Partial<ITxObject>) {\r\n    if (tx.from) this.from = tx.from;\r\n    if (tx.to) this.to = tx.to;\r\n    if (tx.data) this.data = tx.data;\r\n\r\n    if (tx.gas) this.gas = new BN(tx.gas, 10).toString(16);\r\n    if (tx.gasPrice) this.gasPrice = new BN(tx.gasPrice, 10).toString(16);\r\n    if (tx.value) this.value = new BN(tx.value, 10).toString(16);\r\n    if (tx.nonce) this.nonce = new BN(tx.nonce, 10).toString(16);\r\n\r\n  }\r\n}\r\n"],"names":["utf8.encode","utf8.decode","BN"],"mappings":"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AG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1C,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAE1C,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAEX,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;QAClC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACrC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QACpC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;QAEpC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC,EAAE,CAAC,GAAG,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"}
