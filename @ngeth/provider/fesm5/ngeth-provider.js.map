{"version":3,"file":"ngeth-provider.js.map","sources":["ng://@ngeth/provider/lib/provider.ts","ng://@ngeth/provider/lib/providers.module.ts","ng://@ngeth/provider/lib/providers/ws-provider.ts","ng://@ngeth/provider/lib/subproviders/account.ts","ng://@ngeth/provider/lib/provider.decorator.ts","ng://@ngeth/provider/lib/subproviders/contract.ts","ng://@ngeth/provider/lib/subproviders/eth.ts"],"sourcesContent":["import { Type } from '@angular/core';\r\nimport { RPCReq, RPCRes, RPCSub } from '@ngeth/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { tap, map } from 'rxjs/operators';\r\n\r\n// @dynamic\r\nexport class MainProvider {\r\n  static Auth: Type<any>;\r\n  protected sendAsync: <T>(payload: RPCReq) => Observable<RPCRes<T>>;\r\n  protected on: <T>(payload: RPCReq) => Observable<RPCSub<T>>;\r\n  protected rpcId = 0;\r\n  protected web3Provider: any;\r\n  public url: string;\r\n  public id: number;\r\n  public type: 'web3' | 'http' | 'ws';\r\n\r\n  constructor() {}\r\n\r\n  /** JSON RPC Request */\r\n  protected req(method: string, params?: any[]): RPCReq {\r\n    return {\r\n      jsonrpc: '2.0',\r\n      id: this.rpcId,\r\n      method: method,\r\n      params: params || []\r\n    };\r\n  }\r\n\r\n  /** JSON RPC Response */\r\n  protected res<T>(payload: any, result: any): RPCRes<T> {\r\n    return {\r\n      jsonrpc: payload.jsonrpc,\r\n      id: payload.id,\r\n      result: result\r\n    };\r\n  }\r\n\r\n  /** Get the id of the provider : use only at launch */\r\n  public fetchId(): Promise<number> {\r\n    this.rpcId++;\r\n    return this.rpc<number>('net_version').toPromise<number>();\r\n  }\r\n\r\n  /** Send a request to the node */\r\n  public rpc<T>(method: string, params?: any[]): Observable<T> {\r\n    const payload = this.req(method, params);\r\n    return this.sendAsync<T>(payload).pipe(\r\n      tap(console.log),\r\n      map(res => {\r\n        if (res.error) throw res.error;\r\n        return res.result;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** Send a subscription request to the node */\r\n  public rpcSub<T>(params: any[]): Observable<T> {\r\n    const payload = this.req('eth_subscribe', params);\r\n    return this.on<T>(payload).pipe(\r\n      map(res =>  res.params.result)\r\n    );\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  InjectionToken,\r\n  APP_INITIALIZER\r\n} from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { MainProvider } from './provider';\r\n\r\nexport const AUTH = new InjectionToken<any>('auth');\r\n\r\n// @dynamic\r\n@NgModule({\r\n  imports: [HttpClientModule]\r\n})\r\nexport class ProvidersModule {\r\n  static forRoot(Provider: typeof MainProvider): ModuleWithProviders {\r\n    return {\r\n      ngModule: ProvidersModule,\r\n      providers: [\r\n        { provide: MainProvider, useExisting: Provider },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          useFactory: (provider: MainProvider) => {\r\n            return  () => provider.fetchId().then(id => provider.id = id);\r\n          },\r\n          multi: true,\r\n          deps: [MainProvider]\r\n        },\r\n        { provide: AUTH, useClass: Provider.Auth },\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RPCRes, RPCSub, RPCReq } from '@ngeth/utils';\r\nimport { ProvidersModule } from './../providers.module';\r\nimport { w3cwebsocket } from 'websocket';\r\nimport { WebSocketSubject } from 'rxjs/webSocket';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { filter, first, tap, switchMap, map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: ProvidersModule })\r\nexport class WebsocketProvider {\r\n  private socket$: WebSocketSubject<any>;\r\n  public observables: Observable<RPCSub>[] = [];\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Check if a message is the subscription we want\r\n   * @param msg The message returned by the node\r\n   * @param subscription The subscription to map\r\n   */\r\n  private isSubscription(msg: any, subscription: string): msg is RPCSub {\r\n    return !!msg.method\r\n          && msg.method === 'eth_subscription'\r\n          && msg.params.subscription === subscription;\r\n  }\r\n\r\n  /** Return the response of an RPC Request */\r\n  private response<T>(id: number) {\r\n    return this.socket$.pipe(\r\n      filter((msg: RPCRes<T>) => msg.id === id),\r\n      first()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Subscribe to the node for a specific subscription name\r\n   * @param subscription The subscription name we want to subscribe to\r\n   */\r\n  private subscription<T>(subscription: string): Observable<RPCSub<T>> {\r\n    return this.socket$.pipe(\r\n      filter(msg => this.isSubscription(msg, subscription))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Create a socket between the client and the node\r\n   * @param url The url of the node to connect to\r\n   */\r\n  public create(url: string) {\r\n    this.socket$ = new WebSocketSubject({\r\n      url: url,\r\n      WebSocketCtor: w3cwebsocket as any\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send an RPC request to the node\r\n   * @param payload The RPC request\r\n   */\r\n  public post<T = any>(payload: RPCReq): Observable<RPCRes<T>> {\r\n    this.socket$.next(payload);\r\n    return this.response<T>(payload.id);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a SUB/PUB\r\n   * @param payload The RPC request\r\n   */\r\n  public subscribe(payload: RPCReq) {\r\n    this.socket$.next(payload);\r\n    return this.response<string>(payload.id).pipe(\r\n      tap(res => { if (res.error) throw res.error; }),\r\n      map(res => res.result),\r\n      switchMap(result => {\r\n        return this.observables[result] = this.subscription(result);\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO\r\n  public unsubscribe() {\r\n\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TxObject, utf8ToHex, BlockTag, toChecksumAddress } from '@ngeth/utils';\r\nimport { ProvidersModule } from './../providers.module';\r\nimport { MainProvider } from '../provider';\r\nimport { Auth } from '../auth';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({ providedIn : ProvidersModule })\r\nexport class Account implements Auth {\r\n  private currentAccount = new BehaviorSubject<string>(null);\r\n  public account$ = this.currentAccount.asObservable();\r\n\r\n  constructor(private provider: MainProvider) {}\r\n\r\n  /** Get the default account */\r\n  get defaultAccount(): string {\r\n    return this.currentAccount.getValue();\r\n  }\r\n\r\n  /** Set the default account */\r\n  set defaultAccount(account: string) {\r\n    this.currentAccount.next(toChecksumAddress(account));\r\n  }\r\n\r\n  /** Get the list of accounts available on the node */\r\n  public getAccounts(): Observable<string[]> {\r\n    return this.provider.rpc<string[]>('eth_accounts');\r\n  }\r\n\r\n  /**\r\n   * Send a transaction to the node\r\n   * @param tx The transaction to pass to the node\r\n   * @param blockTag The block to target\r\n   */\r\n  public sendTransaction<T>(\r\n    tx: TxObject,\r\n    blockTag: BlockTag = 'latest'\r\n  ): Observable<T> {\r\n    return this.provider.rpc<T>('eth_sendTransaction', [tx, blockTag]);\r\n  }\r\n\r\n  public getBalance(address: string, blockTag?: BlockTag | number) {\r\n    return this.provider.rpc<string>('eth_getBalance', [address, blockTag || 'latest']);\r\n  }\r\n\r\n  public getTransactionCount(address: string, blockTag?: BlockTag | number) {\r\n    return this.provider.rpc<string>('eth_getTransactionCount', [\r\n      address,\r\n      blockTag || 'latest'\r\n    ]);\r\n  }\r\n\r\n  public sign(message: string, address: string,  pwd: string): Observable<string> {\r\n    const msg = utf8ToHex(message);\r\n    const method = this.provider.type === 'web3' ? 'personal_sign' : 'eth_sign';\r\n    const params = this.provider.type === 'web3' ? [address, msg, pwd] : [msg, address];\r\n    return this.provider.rpc<string>(method, params);\r\n  }\r\n}\r\n","import { WebsocketProvider } from './providers/ws-provider';\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { bindNodeCallback, Observable } from 'rxjs';\r\n\r\nimport { RPCRes, RPCReq, RPCSub } from '@ngeth/utils';\r\nimport { MainProvider } from './provider';\r\nimport { ProvidersModule } from './providers.module';\r\nimport { Account } from './subproviders/account';\r\n\r\n\r\nexport function Provider(options: {\r\n  url: string;\r\n  auth?: any;\r\n}) {\r\n\r\n  return function(Base: Type<MainProvider>) {\r\n\r\n    @Injectable({ providedIn: ProvidersModule })\r\n    class DecoratedProvider extends MainProvider {\r\n      public static Auth = options.auth || Account;\r\n      public sendAsync: <T>(payload: RPCReq) => Observable<RPCRes<T>>;\r\n      public on: <T>(payload: RPCReq) => Observable<RPCSub<T>>;\r\n\r\n      constructor(\r\n        private http: HttpClient,\r\n        private ws: WebsocketProvider\r\n      ) {\r\n        super();\r\n        this.url = options.url || 'localhost:8545';\r\n        const protocol = new URL(this.url).protocol;\r\n        const isWS = protocol === 'ws:' || protocol === 'wss:';\r\n\r\n        if (window && 'web3' in window) {\r\n          this.type = 'web3';\r\n          this.setWeb3Provider();\r\n        } else if (isWS) {\r\n          this.type = 'ws';\r\n          this.setWsProvider();\r\n        } else {\r\n          this.type = 'http';\r\n          this.setHttpProvider();\r\n        }\r\n\r\n      }\r\n\r\n      /** Connect to a web3 instance inside the page if any */\r\n      private setWeb3Provider() {\r\n        this.web3Provider = window['web3'].currentProvider;\r\n        this.sendAsync = (payload) => {\r\n          const sendAsync = this.web3Provider.sendAsync.bind(this.web3Provider, payload);\r\n          return bindNodeCallback<any>(sendAsync)();\r\n        }\r\n      }\r\n\r\n      /** Setup a Websocket connection with the node */\r\n      private setWsProvider() {\r\n        this.ws.create(this.url);\r\n        this.on = (payload) => {\r\n          this.rpcId ++;\r\n          return this.ws.subscribe(payload);\r\n        }\r\n        this.sendAsync = (payload) => {\r\n          this.rpcId ++;\r\n          return this.ws.post(payload);\r\n        }\r\n      }\r\n\r\n      /** Setup an HTTP connection with the node */\r\n      private setHttpProvider() {\r\n        this.sendAsync = (payload) => {\r\n          this.rpcId ++;\r\n          return this.http.post<RPCRes<any>>(this.url, payload);\r\n        }\r\n      }\r\n    }\r\n    return DecoratedProvider as any;\r\n  };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { BlockTag, TxLogs, ITxObject, TxObject, hexToNumber, hexToNumberString } from '@ngeth/utils';\r\nimport { ProvidersModule, AUTH } from '../providers.module';\r\nimport { Auth } from './../auth';\r\nimport { MainProvider } from './../provider';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn : ProvidersModule })\r\nexport class ContractProvider {\r\n  private currentTx = new BehaviorSubject<Partial<ITxObject>>(null);\r\n  public tx$ = this.currentTx.asObservable();\r\n  public id: number;\r\n\r\n  constructor(@Inject(AUTH) private auth: Auth, private provider: MainProvider) {\r\n    this.auth.account$\r\n        .subscribe(from => this.defaultTx = { ...this.defaultTx, from });\r\n    this.id = this.provider.id;\r\n  }\r\n\r\n  get defaultTx(): Partial<ITxObject> {\r\n    return this.currentTx.getValue();\r\n  }\r\n\r\n  set defaultTx(transaction: Partial<ITxObject>) {\r\n    const tx = {...this.currentTx.getValue(), ...transaction };\r\n    this.currentTx.next(tx);\r\n  }\r\n\r\n  /**\r\n   * Make a call to the node\r\n   * @param to The address of the contract to contact\r\n   * @param data The data of the call as bytecode\r\n   * @param blockTag The block to target\r\n   */\r\n  public call<T>(\r\n    to: string,\r\n    data: string,\r\n    blockTag: BlockTag = 'latest'\r\n  ): Observable<T> {\r\n    return this.provider.rpc<T>('eth_call', [{ to, data }, blockTag]);\r\n  }\r\n\r\n  /**\r\n   * Send a transaction to the node\r\n   * @param tx The transaction to pass to the node\r\n   * @param blockTag The block to target\r\n   */\r\n  public sendTransaction<T>(\r\n    transaction: Partial<ITxObject>,\r\n    ...rest: any[]\r\n  ): Observable<T> {\r\n    const tx = new TxObject(transaction);\r\n    return this.auth.sendTransaction(tx, rest);\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a RPC request for a subscription\r\n   * @param address The address of the contract\r\n   * @param topics The signature of the event\r\n   */\r\n  public event(\r\n    address: string,\r\n    topics: string[]\r\n  ): Observable<TxLogs> {\r\n    return this.provider.rpcSub<TxLogs>(['logs', {address, topics}]).pipe(\r\n      map(logs => new TxLogs(logs))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Estimate the amount of gas needed for transaction\r\n   * @param transaction The transaction to estimate the gas from\r\n   */\r\n  public estimateGas(transaction: Partial<ITxObject>): Observable<number> {\r\n    const tx = new TxObject(transaction);\r\n    return this.provider.rpc<string>('eth_estimateGas', [tx]).pipe(\r\n      map(gas => hexToNumber(gas.replace('0x', '')))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the current price per gas in wei\r\n   */\r\n  public gasPrice(): Observable<string> {\r\n    return this.provider.rpc<string>('eth_gasPrice', []).pipe(\r\n      map(price => hexToNumberString(price.replace('0x', '')))\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { numberToHex, Block, Transaction, TxReceipt, toBN } from '@ngeth/utils';\r\nimport { ProvidersModule } from '../providers.module'\r\nimport { MainProvider } from '../provider';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({ providedIn : ProvidersModule })\r\nexport class Eth {\r\n\r\n  constructor(private provider: MainProvider) {}\r\n\r\n  public getBlockNumber(): Observable<string> {\r\n    return this.provider\r\n      .rpc<string>('eth_blockNumber')\r\n      .pipe(map(block => toBN(block).toString(10)));;\r\n  }\r\n\r\n  public getGasPrice(): Observable<number> {\r\n    return this.provider\r\n      .rpc<number>('eth_gasPrice')\r\n      .pipe(map(block => toBN(block).toString(10)));\r\n  }\r\n\r\n  /******\r\n   * BLOCK\r\n   */\r\n  public getBlockByNumber(blockNumber): Observable<any> {\r\n    const isNumber = typeof blockNumber === 'number';\r\n    const params = isNumber ? numberToHex(blockNumber) : blockNumber;\r\n    return this.provider\r\n      .rpc<any>('eth_getBlockByNumber', [params, true])\r\n      .pipe(map(block => (block ? new Block(block) : null)));\r\n  }\r\n\r\n  public getBlockByHash(blockHash: string): Observable<any> {\r\n    return this.provider\r\n      .rpc<any>('eth_getBlockByNumber', [blockHash, true])\r\n      .pipe(map(block => (block ? new Block(block) : null)));\r\n  }\r\n\r\n  /*************\r\n   * TRANSACTION\r\n   */\r\n  public getTransaction(transactionHash: string): Observable<any> {\r\n    return this.provider\r\n      .rpc<number>('eth_getTransactionByHash', [transactionHash])\r\n      .pipe(map(tx => (tx ? new Transaction(tx) : null)));\r\n  }\r\n\r\n  public getTransactionReceipt(transactionHash: string): Observable<any> {\r\n    return this.provider\r\n      .rpc<number>('eth_getTransactionReceipt', [transactionHash])\r\n      .pipe(map(receipt => (receipt ? new TxReceipt(receipt) : null)));\r\n  }\r\n\r\n  /***************\r\n   * SUBSCRIPTIONS\r\n   */\r\n  public onNewBlock() {\r\n    return this.provider.rpcSub(['newHeads']).pipe(\r\n      map(res => new Block(res))\r\n    )\r\n  }\r\n\r\n  public isSyncing() {\r\n    return this.provider.rpcSub(['syncing']);\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
