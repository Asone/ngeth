{"version":3,"sources":["ng://@ngeth/provider/lib/provider.ts","ng://@ngeth/provider/lib/providers.module.ts","null","ng://@ngeth/provider/lib/providers/ws-provider.ts","ng://@ngeth/provider/lib/subproviders/account.ts","ng://@ngeth/provider/lib/subproviders/contract.ts","ng://@ngeth/provider/lib/subproviders/eth.ts","ng://@ngeth/provider/lib/provider.decorator.ts"],"names":["MainProvider","prototype","req","method","params","jsonrpc","id","this","rpcId","res","payload","result","fetchId","rpc","toPromise","sendAsync","pipe","tap","console","log","map","error","rpcSub","on","AUTH","InjectionToken","ProvidersModule","forRoot","Provider","ngModule","providers","provide","useExisting","APP_INITIALIZER","useFactory","provider","then","multi","deps","useClass","Auth","NgModule","args","imports","HttpClientModule","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","WebsocketProvider","isSubscription","msg","subscription","response","socket$","filter","first","_this","create","url","WebSocketSubject","WebSocketCtor","w3cwebsocket","post","next","subscribe","switchMap","observables","unsubscribe","Injectable","providedIn","Account","BehaviorSubject","currentAccount","asObservable","defineProperty","getValue","account","toChecksumAddress","getAccounts","sendTransaction","tx","blockTag","getBalance","address","getTransactionCount","sign","message","pwd","utf8ToHex","type","ContractProvider","auth","currentTx","account$","from","defaultTx","transaction","to","data","rest","_i","TxObject","event","topics","logs","TxLogs","estimateGas","gas","hexToNumber","replace","gasPrice","price","hexToNumberString","Inject","Eth","getBlockNumber","block","toBN","toString","getGasPrice","getBlockByNumber","blockNumber","numberToHex","Block","getBlockByHash","blockHash","getTransaction","transactionHash","Transaction","getTransactionReceipt","receipt","TxReceipt","onNewBlock","isSyncing","options","Base","DecoratedProvider","http","ws","_super","protocol","URL","isWS","window","setWeb3Provider","setWsProvider","setHttpProvider","__","constructor","tslib_1.__extends","web3Provider","currentProvider","bind","bindNodeCallback","HttpClient"],"mappings":"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","sourcesContent":["import { Type } from '@angular/core';\r\nimport { RPCReq, RPCRes, RPCSub } from '@ngeth/utils';\r\nimport { Observable } from 'rxjs';\r\nimport { tap, map } from 'rxjs/operators';\r\n\r\n// @dynamic\r\nexport class MainProvider {\r\n  static Auth: Type<any>;\r\n  protected sendAsync: <T>(payload: RPCReq) => Observable<RPCRes<T>>;\r\n  protected on: <T>(payload: RPCReq) => Observable<RPCSub<T>>;\r\n  protected rpcId = 0;\r\n  protected web3Provider: any;\r\n  public url: string;\r\n  public id: number;\r\n  public type: 'web3' | 'http' | 'ws';\r\n\r\n  constructor() {}\r\n\r\n  /** JSON RPC Request */\r\n  protected req(method: string, params?: any[]): RPCReq {\r\n    return {\r\n      jsonrpc: '2.0',\r\n      id: this.rpcId,\r\n      method: method,\r\n      params: params || []\r\n    };\r\n  }\r\n\r\n  /** JSON RPC Response */\r\n  protected res<T>(payload: any, result: any): RPCRes<T> {\r\n    return {\r\n      jsonrpc: payload.jsonrpc,\r\n      id: payload.id,\r\n      result: result\r\n    };\r\n  }\r\n\r\n  /** Get the id of the provider : use only at launch */\r\n  public fetchId(): Promise<number> {\r\n    this.rpcId++;\r\n    return this.rpc<number>('net_version').toPromise<number>();\r\n  }\r\n\r\n  /** Send a request to the node */\r\n  public rpc<T>(method: string, params?: any[]): Observable<T> {\r\n    const payload = this.req(method, params);\r\n    return this.sendAsync<T>(payload).pipe(\r\n      tap(console.log),\r\n      map(res => {\r\n        if (res.error) throw res.error;\r\n        return res.result;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** Send a subscription request to the node */\r\n  public rpcSub<T>(params: any[]): Observable<T> {\r\n    const payload = this.req('eth_subscribe', params);\r\n    return this.on<T>(payload).pipe(\r\n      map(res =>  res.params.result)\r\n    );\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  InjectionToken,\r\n  APP_INITIALIZER\r\n} from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { MainProvider } from './provider';\r\n\r\nexport const AUTH = new InjectionToken<any>('auth');\r\n\r\n// @dynamic\r\n@NgModule({\r\n  imports: [HttpClientModule]\r\n})\r\nexport class ProvidersModule {\r\n  static forRoot(Provider: typeof MainProvider): ModuleWithProviders {\r\n    return {\r\n      ngModule: ProvidersModule,\r\n      providers: [\r\n        { provide: MainProvider, useExisting: Provider },\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          useFactory: (provider: MainProvider) => {\r\n            return  () => provider.fetchId().then(id => provider.id = id);\r\n          },\r\n          multi: true,\r\n          deps: [MainProvider]\r\n        },\r\n        { provide: AUTH, useClass: Provider.Auth },\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RPCRes, RPCSub, RPCReq } from '@ngeth/utils';\r\nimport { ProvidersModule } from './../providers.module';\r\nimport { w3cwebsocket } from 'websocket';\r\nimport { WebSocketSubject } from 'rxjs/webSocket';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { filter, first, tap, switchMap, map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: ProvidersModule })\r\nexport class WebsocketProvider {\r\n  private socket$: WebSocketSubject<any>;\r\n  public observables: Observable<RPCSub>[] = [];\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Check if a message is the subscription we want\r\n   * @param msg The message returned by the node\r\n   * @param subscription The subscription to map\r\n   */\r\n  private isSubscription(msg: any, subscription: string): msg is RPCSub {\r\n    return !!msg.method\r\n          && msg.method === 'eth_subscription'\r\n          && msg.params.subscription === subscription;\r\n  }\r\n\r\n  /** Return the response of an RPC Request */\r\n  private response<T>(id: number) {\r\n    return this.socket$.pipe(\r\n      filter((msg: RPCRes<T>) => msg.id === id),\r\n      first()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Subscribe to the node for a specific subscription name\r\n   * @param subscription The subscription name we want to subscribe to\r\n   */\r\n  private subscription<T>(subscription: string): Observable<RPCSub<T>> {\r\n    return this.socket$.pipe(\r\n      filter(msg => this.isSubscription(msg, subscription))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Create a socket between the client and the node\r\n   * @param url The url of the node to connect to\r\n   */\r\n  public create(url: string) {\r\n    this.socket$ = new WebSocketSubject({\r\n      url: url,\r\n      WebSocketCtor: w3cwebsocket as any\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send an RPC request to the node\r\n   * @param payload The RPC request\r\n   */\r\n  public post<T = any>(payload: RPCReq): Observable<RPCRes<T>> {\r\n    this.socket$.next(payload);\r\n    return this.response<T>(payload.id);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a SUB/PUB\r\n   * @param payload The RPC request\r\n   */\r\n  public subscribe(payload: RPCReq) {\r\n    this.socket$.next(payload);\r\n    return this.response<string>(payload.id).pipe(\r\n      tap(res => { if (res.error) throw res.error; }),\r\n      map(res => res.result),\r\n      switchMap(result => {\r\n        return this.observables[result] = this.subscription(result);\r\n      })\r\n    );\r\n  }\r\n\r\n  // TODO\r\n  public unsubscribe() {\r\n\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TxObject, utf8ToHex, BlockTag, toChecksumAddress } from '@ngeth/utils';\r\nimport { ProvidersModule } from './../providers.module';\r\nimport { MainProvider } from '../provider';\r\nimport { Auth } from '../auth';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({ providedIn : ProvidersModule })\r\nexport class Account implements Auth {\r\n  private currentAccount = new BehaviorSubject<string>(null);\r\n  public account$ = this.currentAccount.asObservable();\r\n\r\n  constructor(private provider: MainProvider) {}\r\n\r\n  /** Get the default account */\r\n  get defaultAccount(): string {\r\n    return this.currentAccount.getValue();\r\n  }\r\n\r\n  /** Set the default account */\r\n  set defaultAccount(account: string) {\r\n    this.currentAccount.next(toChecksumAddress(account));\r\n  }\r\n\r\n  /** Get the list of accounts available on the node */\r\n  public getAccounts(): Observable<string[]> {\r\n    return this.provider.rpc<string[]>('eth_accounts');\r\n  }\r\n\r\n  /**\r\n   * Send a transaction to the node\r\n   * @param tx The transaction to pass to the node\r\n   * @param blockTag The block to target\r\n   */\r\n  public sendTransaction<T>(\r\n    tx: TxObject,\r\n    blockTag: BlockTag = 'latest'\r\n  ): Observable<T> {\r\n    return this.provider.rpc<T>('eth_sendTransaction', [tx, blockTag]);\r\n  }\r\n\r\n  public getBalance(address: string, blockTag?: BlockTag | number) {\r\n    return this.provider.rpc<string>('eth_getBalance', [address, blockTag || 'latest']);\r\n  }\r\n\r\n  public getTransactionCount(address: string, blockTag?: BlockTag | number) {\r\n    return this.provider.rpc<string>('eth_getTransactionCount', [\r\n      address,\r\n      blockTag || 'latest'\r\n    ]);\r\n  }\r\n\r\n  public sign(message: string, address: string,  pwd: string): Observable<string> {\r\n    const msg = utf8ToHex(message);\r\n    const method = this.provider.type === 'web3' ? 'personal_sign' : 'eth_sign';\r\n    const params = this.provider.type === 'web3' ? [address, msg, pwd] : [msg, address];\r\n    return this.provider.rpc<string>(method, params);\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { BlockTag, TxLogs, ITxObject, TxObject, hexToNumber, hexToNumberString } from '@ngeth/utils';\r\nimport { ProvidersModule, AUTH } from '../providers.module';\r\nimport { Auth } from './../auth';\r\nimport { MainProvider } from './../provider';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn : ProvidersModule })\r\nexport class ContractProvider {\r\n  private currentTx = new BehaviorSubject<Partial<ITxObject>>(null);\r\n  public tx$ = this.currentTx.asObservable();\r\n  public id: number;\r\n\r\n  constructor(@Inject(AUTH) private auth: Auth, private provider: MainProvider) {\r\n    this.auth.account$\r\n        .subscribe(from => this.defaultTx = { ...this.defaultTx, from });\r\n    this.id = this.provider.id;\r\n  }\r\n\r\n  get defaultTx(): Partial<ITxObject> {\r\n    return this.currentTx.getValue();\r\n  }\r\n\r\n  set defaultTx(transaction: Partial<ITxObject>) {\r\n    const tx = {...this.currentTx.getValue(), ...transaction };\r\n    this.currentTx.next(tx);\r\n  }\r\n\r\n  /**\r\n   * Make a call to the node\r\n   * @param to The address of the contract to contact\r\n   * @param data The data of the call as bytecode\r\n   * @param blockTag The block to target\r\n   */\r\n  public call<T>(\r\n    to: string,\r\n    data: string,\r\n    blockTag: BlockTag = 'latest'\r\n  ): Observable<T> {\r\n    return this.provider.rpc<T>('eth_call', [{ to, data }, blockTag]);\r\n  }\r\n\r\n  /**\r\n   * Send a transaction to the node\r\n   * @param tx The transaction to pass to the node\r\n   * @param blockTag The block to target\r\n   */\r\n  public sendTransaction<T>(\r\n    transaction: Partial<ITxObject>,\r\n    ...rest: any[]\r\n  ): Observable<T> {\r\n    const tx = new TxObject(transaction);\r\n    return this.auth.sendTransaction(tx, rest);\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a RPC request for a subscription\r\n   * @param address The address of the contract\r\n   * @param topics The signature of the event\r\n   */\r\n  public event(\r\n    address: string,\r\n    topics: string[]\r\n  ): Observable<TxLogs> {\r\n    return this.provider.rpcSub<TxLogs>(['logs', {address, topics}]).pipe(\r\n      map(logs => new TxLogs(logs))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Estimate the amount of gas needed for transaction\r\n   * @param transaction The transaction to estimate the gas from\r\n   */\r\n  public estimateGas(transaction: Partial<ITxObject>): Observable<number> {\r\n    const tx = new TxObject(transaction);\r\n    return this.provider.rpc<string>('eth_estimateGas', [tx]).pipe(\r\n      map(gas => hexToNumber(gas.replace('0x', '')))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the current price per gas in wei\r\n   */\r\n  public gasPrice(): Observable<string> {\r\n    return this.provider.rpc<string>('eth_gasPrice', []).pipe(\r\n      map(price => hexToNumberString(price.replace('0x', '')))\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { numberToHex, Block, Transaction, TxReceipt, toBN } from '@ngeth/utils';\r\nimport { ProvidersModule } from '../providers.module'\r\nimport { MainProvider } from '../provider';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({ providedIn : ProvidersModule })\r\nexport class Eth {\r\n\r\n  constructor(private provider: MainProvider) {}\r\n\r\n  public getBlockNumber(): Observable<string> {\r\n    return this.provider\r\n      .rpc<string>('eth_blockNumber')\r\n      .pipe(map(block => toBN(block).toString(10)));;\r\n  }\r\n\r\n  public getGasPrice(): Observable<number> {\r\n    return this.provider\r\n      .rpc<number>('eth_gasPrice')\r\n      .pipe(map(block => toBN(block).toString(10)));\r\n  }\r\n\r\n  /******\r\n   * BLOCK\r\n   */\r\n  public getBlockByNumber(blockNumber): Observable<any> {\r\n    const isNumber = typeof blockNumber === 'number';\r\n    const params = isNumber ? numberToHex(blockNumber) : blockNumber;\r\n    return this.provider\r\n      .rpc<any>('eth_getBlockByNumber', [params, true])\r\n      .pipe(map(block => (block ? new Block(block) : null)));\r\n  }\r\n\r\n  public getBlockByHash(blockHash: string): Observable<any> {\r\n    return this.provider\r\n      .rpc<any>('eth_getBlockByNumber', [blockHash, true])\r\n      .pipe(map(block => (block ? new Block(block) : null)));\r\n  }\r\n\r\n  /*************\r\n   * TRANSACTION\r\n   */\r\n  public getTransaction(transactionHash: string): Observable<any> {\r\n    return this.provider\r\n      .rpc<number>('eth_getTransactionByHash', [transactionHash])\r\n      .pipe(map(tx => (tx ? new Transaction(tx) : null)));\r\n  }\r\n\r\n  public getTransactionReceipt(transactionHash: string): Observable<any> {\r\n    return this.provider\r\n      .rpc<number>('eth_getTransactionReceipt', [transactionHash])\r\n      .pipe(map(receipt => (receipt ? new TxReceipt(receipt) : null)));\r\n  }\r\n\r\n  /***************\r\n   * SUBSCRIPTIONS\r\n   */\r\n  public onNewBlock() {\r\n    return this.provider.rpcSub(['newHeads']).pipe(\r\n      map(res => new Block(res))\r\n    )\r\n  }\r\n\r\n  public isSyncing() {\r\n    return this.provider.rpcSub(['syncing']);\r\n  }\r\n}\r\n","import { WebsocketProvider } from './providers/ws-provider';\r\nimport { Injectable, Type } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { bindNodeCallback, Observable } from 'rxjs';\r\n\r\nimport { RPCRes, RPCReq, RPCSub } from '@ngeth/utils';\r\nimport { MainProvider } from './provider';\r\nimport { ProvidersModule } from './providers.module';\r\nimport { Account } from './subproviders/account';\r\n\r\n\r\nexport function Provider(options: {\r\n  url: string;\r\n  auth?: any;\r\n}) {\r\n\r\n  return function(Base: Type<MainProvider>) {\r\n\r\n    @Injectable({ providedIn: ProvidersModule })\r\n    class DecoratedProvider extends MainProvider {\r\n      public static Auth = options.auth || Account;\r\n      public sendAsync: <T>(payload: RPCReq) => Observable<RPCRes<T>>;\r\n      public on: <T>(payload: RPCReq) => Observable<RPCSub<T>>;\r\n\r\n      constructor(\r\n        private http: HttpClient,\r\n        private ws: WebsocketProvider\r\n      ) {\r\n        super();\r\n        this.url = options.url || 'localhost:8545';\r\n        const protocol = new URL(this.url).protocol;\r\n        const isWS = protocol === 'ws:' || protocol === 'wss:';\r\n\r\n        if (window && 'web3' in window) {\r\n          this.type = 'web3';\r\n          this.setWeb3Provider();\r\n        } else if (isWS) {\r\n          this.type = 'ws';\r\n          this.setWsProvider();\r\n        } else {\r\n          this.type = 'http';\r\n          this.setHttpProvider();\r\n        }\r\n\r\n      }\r\n\r\n      /** Connect to a web3 instance inside the page if any */\r\n      private setWeb3Provider() {\r\n        this.web3Provider = window['web3'].currentProvider;\r\n        this.sendAsync = (payload) => {\r\n          const sendAsync = this.web3Provider.sendAsync.bind(this.web3Provider, payload);\r\n          return bindNodeCallback<any>(sendAsync)();\r\n        }\r\n      }\r\n\r\n      /** Setup a Websocket connection with the node */\r\n      private setWsProvider() {\r\n        this.ws.create(this.url);\r\n        this.on = (payload) => {\r\n          this.rpcId ++;\r\n          return this.ws.subscribe(payload);\r\n        }\r\n        this.sendAsync = (payload) => {\r\n          this.rpcId ++;\r\n          return this.ws.post(payload);\r\n        }\r\n      }\r\n\r\n      /** Setup an HTTP connection with the node */\r\n      private setHttpProvider() {\r\n        this.sendAsync = (payload) => {\r\n          this.rpcId ++;\r\n          return this.http.post<RPCRes<any>>(this.url, payload);\r\n        }\r\n      }\r\n    }\r\n    return DecoratedProvider as any;\r\n  };\r\n}\r\n"]}